{"codeList":["# 3. Insert randomly generated vectors \ncolors = [\"green\", \"blue\", \"yellow\", \"red\", \"black\", \"white\", \"purple\", \"pink\", \"orange\", \"brown\", \"grey\"]\ndata = []\n\nfor i in range(1000):\n    current_color = random.choice(colors)\n    current_tag = random.randint(1000, 9999)\n    current_coord = [ random.randint(0, 40) for _ in range(3) ]\n    current_ref = [ [ random.choice(colors) for _ in range(3) ] for _ in range(3) ]\n    data.append({\n        \"id\": i,\n        \"vector\": [ random.uniform(-1, 1) for _ in range(5) ],\n        \"color\": {\n            \"label\": current_color,\n            \"tag\": current_tag,\n            \"coord\": current_coord,\n            \"ref\": current_ref\n        }\n    })\n\nprint(data[0])\n","import java.util.*;\n\nimport com.google.gson.Gson;\nimport com.google.gson.JsonObject;\n\n// 3. Insert randomly generated vectors and JSON data into the collection\nList<String> colors = Arrays.asList(\"green\", \"blue\", \"yellow\", \"red\", \"black\", \"white\", \"purple\", \"pink\", \"orange\", \"brown\", \"grey\");\nList<JsonObject> data = new ArrayList<>();\n\nGson gson = new Gson();\nRandom rand = new Random();\nfor (int i=0; i<1000; i++) {\n    String current_color = colors.get(rand.nextInt(colors.size()-1));\n    Integer current_tag = rand.nextInt(8999) + 1000;\n    List<Integer> current_coord = Arrays.asList(rand.nextInt(40), rand.nextInt(40), rand.nextInt(40));\n    List<List<String>> current_ref = Arrays.asList(\n            Arrays.asList(colors.get(rand.nextInt(colors.size()-1)), colors.get(rand.nextInt(colors.size()-1)), colors.get(rand.nextInt(colors.size()-1))),\n            Arrays.asList(colors.get(rand.nextInt(colors.size()-1)), colors.get(rand.nextInt(colors.size()-1)), colors.get(rand.nextInt(colors.size()-1))),\n            Arrays.asList(colors.get(rand.nextInt(colors.size()-1)), colors.get(rand.nextInt(colors.size()-1)), colors.get(rand.nextInt(colors.size()-1)))\n    );\n    JsonObject row = new JsonObject();\n    row.addProperty(\"id\", (long) i);\n    row.add(\"vector\", gson.toJsonTree(Arrays.asList(rand.nextFloat(), rand.nextFloat(), rand.nextFloat(), rand.nextFloat(), rand.nextFloat())));\n    JsonObject color = new JsonObject();\n    color.addProperty(\"label\", current_color);\n    color.addProperty(\"tag\", current_tag);\n    color.add(\"coord\", gson.toJsonTree(current_coord));\n    color.add(\"ref\", gson.toJsonTree(current_ref));\n    row.add(\"color\", color);\n    data.add(row);\n}\n\nSystem.out.println(data.get(0));\n","// 3. Insert randomly generated vectors \nconst colors = [\"green\", \"blue\", \"yellow\", \"red\", \"black\", \"white\", \"purple\", \"pink\", \"orange\", \"brown\", \"grey\"]\nvar data = []\n\nfor (let i = 0; i < 1000; i++) {\n    const current_color = colors[Math.floor(Math.random() * colors.length)]\n    const current_tag = Math.floor(Math.random() * 8999 + 1000)\n    const current_coord = Array(3).fill(0).map(() => Math.floor(Math.random() * 40))\n    const current_ref = [ Array(3).fill(0).map(() => colors[Math.floor(Math.random() * colors.length)]) ]\n\n    data.push({\n        id: i,\n        vector: [Math.random(), Math.random(), Math.random(), Math.random(), Math.random()],\n        color: {\n            label: current_color,\n            tag: current_tag,\n            coord: current_coord,\n            ref: current_ref\n        }\n    })\n}\n\nconsole.log(data[0])\n","{\n    \"id\": 0,\n    \"vector\": [\n        -0.8017921296923975,\n        0.550046715206634,\n        0.764922589768134,\n        0.6371433836123146,\n        0.2705233937454232\n    ],\n    \"color\": {\n        \"label\": \"blue\",\n        \"tag\": 9927,\n        \"coord\": [\n            22,\n            36,\n            6\n        ],\n        \"ref\": [\n            [\n                \"blue\",\n                \"green\",\n                \"white\"\n            ],\n            [\n                \"black\",\n                \"green\",\n                \"pink\"\n            ],\n            [\n                \"grey\",\n                \"black\",\n                \"brown\"\n            ]\n        ]\n    }\n}\n","import random, time\nfrom pymilvus import connections, MilvusClient, DataType\n\nCLUSTER_ENDPOINT = \"http://localhost:19530\"\n\n# 1. Set up a Milvus client\nclient = MilvusClient(\n    uri=CLUSTER_ENDPOINT\n)\n\n# 2. Create a collection\nschema = MilvusClient.create_schema(\n    auto_id=False,\n    enable_dynamic_field=False,\n)\n\nschema.add_field(field_name=\"id\", datatype=DataType.INT64, is_primary=True)\nschema.add_field(field_name=\"vector\", datatype=DataType.FLOAT_VECTOR, dim=5)\nschema.add_field(field_name=\"color\", datatype=DataType.JSON)\n\nindex_params = MilvusClient.prepare_index_params()\n\nindex_params.add_index(\n    field_name=\"id\",\n    index_type=\"STL_SORT\"\n)\n\nindex_params.add_index(\n    field_name=\"vector\",\n    index_type=\"IVF_FLAT\",\n    metric_type=\"L2\",\n    params={\"nlist\": 1024}\n)\n\nclient.create_collection(\n    collection_name=\"test_collection\",\n    schema=schema,\n    index_params=index_params\n)\n\nres = client.get_load_state(\n    collection_name=\"test_collection\"\n)\n\nprint(res)\n\n# Output\n#\n# {\n#     \"state\": \"<LoadState: Loaded>\"\n# }\n","import io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.common.DataType;\nimport io.milvus.v2.common.IndexParam;\nimport io.milvus.v2.service.collection.request.*;\nimport io.milvus.v2.service.vector.request.*;\nimport io.milvus.v2.service.vector.request.data.*;\nimport io.milvus.v2.service.vector.response.*;\n\nString CLUSTER_ENDPOINT = \"http://localhost:19530\";\n\n// 1. Connect to Milvus server\nConnectConfig connectConfig = ConnectConfig.builder()\n    .uri(CLUSTER_ENDPOINT)\n    .build();\n\nMilvusClientV2 client = new MilvusClientV2(connectConfig);\n\n// 2. Create a collection in customized setup mode\n\n// 2.1 Create schema\nCreateCollectionReq.CollectionSchema schema = client.createSchema();\n\n// 2.2 Add fields to schema\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"id\")\n        .dataType(DataType.Int64)\n        .isPrimaryKey(true)\n        .autoID(false)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"vector\")\n        .dataType(DataType.FloatVector)\n        .dimension(5)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"color\")\n        .dataType(DataType.JSON)\n        .build());\n\n// 2.3 Prepare index parameters\nIndexParam indexParamForIdField = IndexParam.builder()\n        .fieldName(\"id\")\n        .indexType(IndexParam.IndexType.STL_SORT)\n        .build();\n\nMap<String, Object> params = new HashMap<>();\nparams.put(\"nlist\", 1024);\nIndexParam indexParamForVectorField = IndexParam.builder()\n        .fieldName(\"vector\")\n        .indexType(IndexParam.IndexType.IVF_FLAT)\n        .metricType(IndexParam.MetricType.IP)\n        .extraParams(params)\n        .build();\n\nList<IndexParam> indexParams = new ArrayList<>();\nindexParams.add(indexParamForIdField);\nindexParams.add(indexParamForVectorField);\n\n// 2.4 Create a collection with schema and index parameters\nCreateCollectionReq customizedSetupReq = CreateCollectionReq.builder()\n        .collectionName(\"test_collection\")\n        .collectionSchema(schema)\n        .indexParams(indexParams)\n        .build();\n\nclient.createCollection(customizedSetupReq);\n\n// 2.5 Check if the collection is loaded\nGetLoadStateReq getLoadStateReq = GetLoadStateReq.builder()\n        .collectionName(\"test_collection\")\n        .build();\n\nBoolean isLoaded = client.getLoadState(getLoadStateReq);\n\nSystem.out.println(isLoaded);\n\n// Output:\n// true\n","const { MilvusClient, DataType, sleep } = require(\"@zilliz/milvus2-sdk-node\")\n\nconst address = \"http://localhost:19530\"\n\nasync function main() {\n// 1. Set up a Milvus Client\nclient = new MilvusClient({address}); \n\n// 2. Create a collection\n// 2.1 Define fields\nconst fields = [\n    {\n        name: \"id\",\n        data_type: DataType.Int64,\n        is_primary_key: true,\n        auto_id: false\n    },\n    {\n        name: \"vector\",\n        data_type: DataType.FloatVector,\n        dim: 5\n    },\n    {\n        name: \"color\",\n        data_type: DataType.JSON,\n    }\n]\n\n// 2.2 Prepare index parameters\nconst index_params = [{\n    field_name: \"vector\",\n    index_type: \"IVF_FLAT\",\n    metric_type: \"IP\",\n    params: { nlist: 1024}\n}]\n\n// 2.3 Create a collection with fields and index parameters\nres = await client.createCollection({\n    collection_name: \"test_collection\",\n    fields: fields, \n    index_params: index_params\n})\n\nconsole.log(res.error_code)\n\n// Output\n// \n// Success\n// \n\nres = await client.getLoadState({\n    collection_name: \"test_collection\",\n})  \n\nconsole.log(res.state)\n\n// Output\n// \n// LoadStateLoaded\n// \n","res = client.insert(\n    collection_name=\"test_collection\",\n    data=data\n)\n\nprint(res)\n\n# Output\n#\n# {\n#     \"insert_count\": 1000,\n#     \"ids\": [\n#         0,\n#         1,\n#         2,\n#         3,\n#         4,\n#         5,\n#         6,\n#         7,\n#         8,\n#         9,\n#         \"(990 more items hidden)\"\n#     ]\n# }\n","// 3.1 Insert data into the collection\nInsertReq insertReq = InsertReq.builder()\n        .collectionName(\"test_collection\")\n        .data(data)\n        .build();\n\nInsertResp insertResp = client.insert(insertReq);\n\nSystem.out.println(insertResp.getInsertCnt());\n\n// Output:\n// 1000\n","// 3. Insert randomly generated vectors \nconst colors = [\"green\", \"blue\", \"yellow\", \"red\", \"black\", \"white\", \"purple\", \"pink\", \"orange\", \"brown\", \"grey\"]\nvar data = []\n\nfor (let i = 0; i < 1000; i++) {\n    const current_color = colors[Math.floor(Math.random() * colors.length)]\n    const current_tag = Math.floor(Math.random() * 8999 + 1000)\n    const current_coord = Array(3).fill(0).map(() => Math.floor(Math.random() * 40))\n    const current_ref = [ Array(3).fill(0).map(() => colors[Math.floor(Math.random() * colors.length)]) ]\n\n    data.push({\n        id: i,\n        vector: [Math.random(), Math.random(), Math.random(), Math.random(), Math.random()],\n        color: {\n            label: current_color,\n            tag: current_tag,\n            coord: current_coord,\n            ref: current_ref\n        }\n    })\n}\n\nconsole.log(data[0])\n\n// Output\n// \n// {\n//   id: 0,\n//   vector: [\n//     0.11455530974226114,\n//     0.21704086958595314,\n//     0.9430119822312437,\n//     0.7802712923612023,\n//     0.9106927960926137\n//   ],\n//   color: { label: 'grey', tag: 7393, coord: [ 22, 1, 22 ], ref: [ [Array] ] }\n// }\n// \n\nres = await client.insert({\n    collection_name: \"test_collection\",\n    data: data,\n})\n\nconsole.log(res.insert_cnt)\n\n// Output\n// \n// 1000\n// \n","# 4. Basic search with a JSON field\nquery_vectors = [ [ random.uniform(-1, 1) for _ in range(5) ]]\n\nres = client.search(\n    collection_name=\"test_collection\",\n    data=query_vectors,\n    filter='color[\"label\"] in [\"red\"]',\n    search_params={\n        \"metric_type\": \"L2\",\n        \"params\": {\"nprobe\": 16}\n    },\n    output_fields=[\"id\", \"color\"],\n    limit=3\n)\n\nprint(res)\n\n# Output\n#\n# [\n#     [\n#         {\n#             \"id\": 460,\n#             \"distance\": 0.4016231596469879,\n#             \"entity\": {\n#                 \"id\": 460,\n#                 \"color\": {\n#                     \"label\": \"red\",\n#                     \"tag\": 5030,\n#                     \"coord\": [14, 32, 40],\n#                     \"ref\": [\n#                         [ \"pink\", \"green\", \"brown\" ],\n#                         [ \"red\", \"grey\", \"black\"],\n#                         [ \"red\", \"yellow\", \"orange\"]\n#                     ]\n#                 }\n#             }\n#         },\n#         {\n#             \"id\": 785,\n#             \"distance\": 0.451080858707428,\n#             \"entity\": {\n#                 \"id\": 785,\n#                 \"color\": {\n#                     \"label\": \"red\",\n#                     \"tag\": 5290,\n#                     \"coord\": [31, 13, 23],\n#                     \"ref\": [\n#                         [\"yellow\", \"pink\", \"pink\"],\n#                         [\"purple\", \"grey\", \"orange\"],\n#                         [\"grey\", \"purple\", \"pink\"]\n#                     ]\n#                 }\n#             }\n#         },\n#         {\n#             \"id\": 355,\n#             \"distance\": 0.5839247703552246,\n#             \"entity\": {\n#                 \"id\": 355,\n#                 \"color\": {\n#                     \"label\": \"red\",\n#                     \"tag\": 8725,\n#                     \"coord\": [5, 10, 22],\n#                     \"ref\": [\n#                         [\"white\", \"purple\", \"yellow\"],\n#                         [\"white\", \"purple\", \"white\"],\n#                         [\"orange\", \"white\", \"pink\"]\n#                     ]\n#                 }\n#             }\n#         }\n#     ]\n# ]\n","// 4. Search with partition key\nList<BaseVector> query_vectors = Collections.singletonList(new FloatVec(new float[]{0.3580376395471989f, -0.6023495712049978f, 0.18414012509913835f, -0.26286205330961354f, 0.9029438446296592f}));\n\nSearchReq searchReq = SearchReq.builder()\n        .collectionName(\"test_collection\")\n        .data(query_vectors)\n        .filter(\"color[\\\"label\\\"] in [\\\"red\\\"]\")\n        .outputFields(Arrays.asList(\"id\", \"color\"))\n        .topK(3)\n        .build();\n\nSearchResp searchResp = client.search(searchReq);\n\nList<List<SearchResp.SearchResult>> searchResults = searchResp.getSearchResults();\nfor (List<SearchResp.SearchResult> results : searchResults) {\n    System.out.println(\"TopK results:\");\n    for (SearchResp.SearchResult result : results) {\n        System.out.println(result);\n    }\n}\n\n// Output:\n// SearchResp.SearchResult(entity=\\{color=\\{\"label\":\"red\",\"tag\":1018,\"coord\":[3,30,1],\"ref\":[[\"yellow\",\"brown\",\"orange\"],[\"yellow\",\"purple\",\"blue\"],[\"green\",\"purple\",\"purple\"]]}, id=295}, score=1.1190735, id=295)\n// SearchResp.SearchResult(entity=\\{color=\\{\"label\":\"red\",\"tag\":8141,\"coord\":[38,31,29],\"ref\":[[\"blue\",\"white\",\"white\"],[\"green\",\"orange\",\"green\"],[\"yellow\",\"green\",\"black\"]]}, id=667}, score=1.0679582, id=667)\n// SearchResp.SearchResult(entity=\\{color=\\{\"label\":\"red\",\"tag\":6837,\"coord\":[29,9,8],\"ref\":[[\"green\",\"black\",\"blue\"],[\"purple\",\"white\",\"green\"],[\"red\",\"blue\",\"black\"]]}, id=927}, score=1.0029297, id=927)\n","// 4. Basic search with a JSON field\nquery_vectors = [[0.6765405125697714, 0.759217474274025, 0.4122471841491111, 0.3346805565394215, 0.09679748345514638]]\n\nres = await client.search({\n    collection_name: \"test_collection\",\n    data: query_vectors,\n    filter: 'color[\"label\"] in [\"red\"]',\n    output_fields: [\"color\", \"id\"],\n    limit: 3\n})\n\nconsole.log(JSON.stringify(res.results, null, 4))\n\n// Output\n// \n// [\n//     {\n//         \"score\": 1.777988076210022,\n//         \"id\": \"595\",\n//         \"color\": {\n//             \"label\": \"red\",\n//             \"tag\": 7393,\n//             \"coord\": [31,34,18],\n//             \"ref\": [\n//                 [\"grey\", \"white\", \"orange\"]\n//             ]\n//         }\n//     },\n//     {\n//         \"score\": 1.7542595863342285,\n//         \"id\": \"82\",\n//         \"color\": {\n//             \"label\": \"red\",\n//             \"tag\": 8636,\n//             \"coord\": [4,37,29],\n//             \"ref\": [\n//                 [\"brown\", \"brown\", \"pink\"]\n//             ]\n//         }\n//     },\n//     {\n//         \"score\": 1.7537562847137451,\n//         \"id\": \"748\",\n//         \"color\": {\n//             \"label\": \"red\",\n//             \"tag\": 1626,\n//             \"coord\": [31,4,25\n//             ],\n//             \"ref\": [\n//                 [\"grey\", \"green\", \"blue\"]\n//             ]\n//         }\n//     }\n// ]\n// \n","# 5. Advanced search within a JSON field\n\nres = client.query(\n    collection_name=\"test_collection\",\n    data=query_vectors,\n    filter='JSON_CONTAINS(color[\"ref\"], [\"blue\", \"brown\", \"grey\"])',\n    output_fields=[\"id\", \"color\"],\n    limit=3\n)\n\nprint(res)\n\n# Output\n#\n# [\n#     {\n#         \"id\": 79,\n#         \"color\": {\n#             \"label\": \"orange\",\n#             \"tag\": 8857,\n#             \"coord\": [\n#                 10,\n#                 14,\n#                 5\n#             ],\n#             \"ref\": [\n#                 [\n#                     \"yellow\",\n#                     \"white\",\n#                     \"green\"\n#                 ],\n#                 [\n#                     \"blue\",\n#                     \"purple\",\n#                     \"purple\"\n#                 ],\n#                 [\n#                     \"blue\",\n#                     \"brown\",\n#                     \"grey\"\n#                 ]\n#             ]\n#         }\n#     },\n#     {\n#         \"id\": 371,\n#         \"color\": {\n#             \"label\": \"black\",\n#             \"tag\": 1324,\n#             \"coord\": [\n#                 2,\n#                 18,\n#                 32\n#             ],\n#             \"ref\": [\n#                 [\n#                     \"purple\",\n#                     \"orange\",\n#                     \"brown\"\n#                 ],\n#                 [\n#                     \"blue\",\n#                     \"brown\",\n#                     \"grey\"\n#                 ],\n#                 [\n#                     \"purple\",\n#                     \"blue\",\n#                     \"blue\"\n#                 ]\n#             ]\n#         }\n#     },\n#     {\n#         \"id\": 590,\n#         \"color\": {\n#             \"label\": \"red\",\n#             \"tag\": 3340,\n#             \"coord\": [\n#                 13,\n#                 21,\n#                 13\n#             ],\n#             \"ref\": [\n#                 [\n#                     \"yellow\",\n#                     \"yellow\",\n#                     \"red\"\n#                 ],\n#                 [\n#                     \"blue\",\n#                     \"brown\",\n#                     \"grey\"\n#                 ],\n#                 [\n#                     \"pink\",\n#                     \"yellow\",\n#                     \"purple\"\n#                 ]\n#             ]\n#         }\n#     }\n# ]\n","// 5. Advanced search within a JSON field\nsearchReq = SearchReq.builder()\n        .collectionName(\"test_collection\")\n        .data(query_vectors)\n        .filter(\"JSON_CONTAINS(color[\\\"ref\\\"], [\\\"purple\\\", \\\"pink\\\", \\\"orange\\\"])\")\n        .outputFields(Arrays.asList(\"id\", \"color\"))\n        .topK(3)\n        .build();\n\nsearchResp = client.search(searchReq);\n\nsearchResults = searchResp.getSearchResults();\nfor (List<SearchResp.SearchResult> results : searchResults) {\n    System.out.println(\"TopK results:\");\n    for (SearchResp.SearchResult result : results) {\n        System.out.println(result);\n    }\n}\n\n// Output:\n// SearchResp.SearchResult(entity={color={\"label\":\"pink\",\"tag\":2963,\"coord\":[15,33,30],\"ref\":[[\"green\",\"white\",\"white\"],[\"purple\",\"pink\",\"orange\"],[\"yellow\",\"black\",\"pink\"]]}, id=273}, score=0.46558747, id=273)\n// SearchResp.SearchResult(entity={color={\"label\":\"pink\",\"tag\":4027,\"coord\":[32,34,19],\"ref\":[[\"red\",\"white\",\"blue\"],[\"white\",\"pink\",\"yellow\"],[\"purple\",\"pink\",\"orange\"]]}, id=344}, score=0.2637315, id=344)\n// SearchResp.SearchResult(entity={color={\"label\":\"black\",\"tag\":1603,\"coord\":[33,12,23],\"ref\":[[\"pink\",\"brown\",\"black\"],[\"black\",\"purple\",\"black\"],[\"purple\",\"pink\",\"orange\"]]}, id=205}, score=0.26133868, id=205)\n\n","// 5. Advanced search within a JSON field\nres = await client.search({\n    collection_name: \"test_collection\",\n    data: query_vectors,\n    filter: 'JSON_CONTAINS(color[\"ref\"], [\"blue\", \"brown\", \"grey\"])',\n    output_fields: [\"color\", \"id\"],\n    limit: 3\n})\n\nconsole.log(JSON.stringify(res.results, null, 4))\n\n// Output\n// \n// [\n//     {\n//         \"id\": 79,\n//         \"color\": {\n//             \"label\": \"orange\",\n//             \"tag\": 8857,\n//             \"coord\": [\n//                 10,\n//                 14,\n//                 5\n//             ],\n//             \"ref\": [\n//                 [\n//                     \"yellow\",\n//                     \"white\",\n//                     \"green\"\n//                 ],\n//                 [\n//                     \"blue\",\n//                     \"purple\",\n//                     \"purple\"\n//                 ],\n//                 [\n//                     \"blue\",\n//                     \"brown\",\n//                     \"grey\"\n//                 ]\n//             ]\n//         }\n//     },\n//     {\n//         \"id\": 371,\n//         \"color\": {\n//             \"label\": \"black\",\n//             \"tag\": 1324,\n//             \"coord\": [\n//                 2,\n//                 18,\n//                 32\n//             ],\n//             \"ref\": [\n//                 [\n//                     \"purple\",\n//                     \"orange\",\n//                     \"brown\"\n//                 ],\n//                 [\n//                     \"blue\",\n//                     \"brown\",\n//                     \"grey\"\n//                 ],\n//                 [\n//                     \"purple\",\n//                     \"blue\",\n//                     \"blue\"\n//                 ]\n//             ]\n//         }\n//     },\n//     {\n//         \"id\": 590,\n//         \"color\": {\n//             \"label\": \"red\",\n//             \"tag\": 3340,\n//             \"coord\": [\n//                 13,\n//                 21,\n//                 13\n//             ],\n//             \"ref\": [\n//                 [\n//                     \"yellow\",\n//                     \"yellow\",\n//                     \"red\"\n//                 ],\n//                 [\n//                     \"blue\",\n//                     \"brown\",\n//                     \"grey\"\n//                 ],\n//                 [\n//                     \"pink\",\n//                     \"yellow\",\n//                     \"purple\"\n//                 ]\n//             ]\n//         }\n//     }\n// ]\n// \n","res = client.query(\n    collection_name=\"test_collection\",\n    data=query_vectors,\n    filter='JSON_CONTAINS_ALL(color[\"coord\"], [4, 5])',\n    output_fields=[\"id\", \"color\"],\n    limit=3\n)\n\nprint(res)\n\n# Output\n#\n# [\n#     {\n#         \"id\": 281,\n#         \"color\": {\n#             \"label\": \"red\",\n#             \"tag\": 3645,\n#             \"coord\": [\n#                 5,\n#                 33,\n#                 4\n#             ],\n#             \"ref\": [\n#                 [\n#                     \"orange\",\n#                     \"blue\",\n#                     \"pink\"\n#                 ],\n#                 [\n#                     \"purple\",\n#                     \"blue\",\n#                     \"purple\"\n#                 ],\n#                 [\n#                     \"black\",\n#                     \"brown\",\n#                     \"yellow\"\n#                 ]\n#             ]\n#         }\n#     },\n#     {\n#         \"id\": 464,\n#         \"color\": {\n#             \"label\": \"brown\",\n#             \"tag\": 6261,\n#             \"coord\": [\n#                 5,\n#                 9,\n#                 4\n#             ],\n#             \"ref\": [\n#                 [\n#                     \"purple\",\n#                     \"purple\",\n#                     \"brown\"\n#                 ],\n#                 [\n#                     \"black\",\n#                     \"pink\",\n#                     \"white\"\n#                 ],\n#                 [\n#                     \"brown\",\n#                     \"grey\",\n#                     \"brown\"\n#                 ]\n#             ]\n#         }\n#     },\n#     {\n#         \"id\": 567,\n#         \"color\": {\n#             \"label\": \"green\",\n#             \"tag\": 4589,\n#             \"coord\": [\n#                 5,\n#                 39,\n#                 4\n#             ],\n#             \"ref\": [\n#                 [\n#                     \"purple\",\n#                     \"yellow\",\n#                     \"white\"\n#                 ],\n#                 [\n#                     \"yellow\",\n#                     \"yellow\",\n#                     \"brown\"\n#                 ],\n#                 [\n#                     \"blue\",\n#                     \"red\",\n#                     \"yellow\"\n#                 ]\n#             ]\n#         }\n#     }\n# ]\n","searchReq = SearchReq.builder()\n        .collectionName(\"test_collection\")\n        .data(query_vectors)\n        .filter(\"JSON_CONTAINS_ALL(color[\\\"coord\\\"], [4, 5])\")\n        .outputFields(Arrays.asList(\"id\", \"color\"))\n        .topK(3)\n        .build();\n\nsearchResp = client.search(searchReq);\n\nsearchResults = searchResp.getSearchResults();\nfor (List<SearchResp.SearchResult> results : searchResults) {\n    System.out.println(\"TopK results:\");\n    for (SearchResp.SearchResult result : results) {\n        System.out.println(result);\n    }\n} \n\n// Output:\n// SearchResp.SearchResult(entity={color={\"label\":\"green\",\"tag\":9899,\"coord\":[5,4,25],\"ref\":[[\"purple\",\"black\",\"yellow\"],[\"orange\",\"green\",\"purple\"],[\"red\",\"purple\",\"pink\"]]}, id=708}, score=0.56576324, id=708)\n// SearchResp.SearchResult(entity={color={\"label\":\"red\",\"tag\":2176,\"coord\":[4,5,23],\"ref\":[[\"red\",\"black\",\"green\"],[\"brown\",\"orange\",\"brown\"],[\"brown\",\"orange\",\"yellow\"]]}, id=981}, score=0.5656834, id=981)\n// SearchResp.SearchResult(entity={color={\"label\":\"pink\",\"tag\":3085,\"coord\":[5,3,4],\"ref\":[[\"yellow\",\"orange\",\"green\"],[\"black\",\"pink\",\"red\"],[\"orange\",\"blue\",\"blue\"]]}, id=221}, score=0.3708634, id=221)\n\n","res = await client.search({\n    collection_name: \"test_collection\",\n    data: query_vectors,\n    filter: 'JSON_CONTAINS_ALL(color[\"coord\"], [4, 5])',\n    output_fields: [\"color\", \"id\"],\n    limit: 3\n})\n\nconsole.log(JSON.stringify(res.results, null, 4))\n\n// Output\n// \n// [\n//     {\n//         \"score\": 1.8944344520568848,\n//         \"id\": \"792\",\n//         \"color\": {\n//             \"label\": \"purple\",\n//             \"tag\": 8161,\n//             \"coord\": [\n//                 4,\n//                 38,\n//                 5\n//             ],\n//             \"ref\": [\n//                 [\n//                     \"red\",\n//                     \"white\",\n//                     \"grey\"\n//                 ]\n//             ]\n//         }\n//     },\n//     {\n//         \"score\": 1.2801706790924072,\n//         \"id\": \"489\",\n//         \"color\": {\n//             \"label\": \"red\",\n//             \"tag\": 4358,\n//             \"coord\": [\n//                 5,\n//                 4,\n//                 1\n//             ],\n//             \"ref\": [\n//                 [\n//                     \"blue\",\n//                     \"orange\",\n//                     \"orange\"\n//                 ]\n//             ]\n//         }\n//     },\n//     {\n//         \"score\": 1.2097992897033691,\n//         \"id\": \"656\",\n//         \"color\": {\n//             \"label\": \"red\",\n//             \"tag\": 7856,\n//             \"coord\": [\n//                 5,\n//                 20,\n//                 4\n//             ],\n//             \"ref\": [\n//                 [\n//                     \"black\",\n//                     \"orange\",\n//                     \"white\"\n//                 ]\n//             ]\n//         }\n//     }\n// ]\n// \n","res = client.query(\n    collection_name=\"test_collection\",\n    data=query_vectors,\n    filter='JSON_CONTAINS_ANY(color[\"coord\"], [4, 5])',\n    output_fields=[\"id\", \"color\"],\n    limit=3\n)\n\nprint(res)\n\n# Output\n#\n# [\n#     {\n#         \"id\": 0,\n#         \"color\": {\n#             \"label\": \"yellow\",\n#             \"tag\": 6340,\n#             \"coord\": [\n#                 40,\n#                 4,\n#                 40\n#             ],\n#             \"ref\": [\n#                 [\n#                     \"purple\",\n#                     \"yellow\",\n#                     \"orange\"\n#                 ],\n#                 [\n#                     \"green\",\n#                     \"grey\",\n#                     \"purple\"\n#                 ],\n#                 [\n#                     \"black\",\n#                     \"white\",\n#                     \"yellow\"\n#                 ]\n#             ]\n#         }\n#     },\n#     {\n#         \"id\": 2,\n#         \"color\": {\n#             \"label\": \"brown\",\n#             \"tag\": 9359,\n#             \"coord\": [\n#                 38,\n#                 21,\n#                 5\n#             ],\n#             \"ref\": [\n#                 [\n#                     \"red\",\n#                     \"brown\",\n#                     \"white\"\n#                 ],\n#                 [\n#                     \"purple\",\n#                     \"red\",\n#                     \"brown\"\n#                 ],\n#                 [\n#                     \"pink\",\n#                     \"grey\",\n#                     \"black\"\n#                 ]\n#             ]\n#         }\n#     },\n#     {\n#         \"id\": 7,\n#         \"color\": {\n#             \"label\": \"green\",\n#             \"tag\": 3560,\n#             \"coord\": [\n#                 5,\n#                 9,\n#                 5\n#             ],\n#             \"ref\": [\n#                 [\n#                     \"blue\",\n#                     \"orange\",\n#                     \"green\"\n#                 ],\n#                 [\n#                     \"blue\",\n#                     \"blue\",\n#                     \"black\"\n#                 ],\n#                 [\n#                     \"green\",\n#                     \"purple\",\n#                     \"green\"\n#                 ]\n#             ]\n#         }\n#     }\n# ]\n","searchReq = SearchReq.builder()\n        .collectionName(\"test_collection\")\n        .data(query_vectors)\n        .filter(\"JSON_CONTAINS_ANY(color[\\\"coord\\\"], [4, 5])\")\n        .outputFields(Arrays.asList(\"id\", \"color\"))\n        .topK(3)\n        .build();\n\nsearchResp = client.search(searchReq);\nsearchResults = searchResp.getSearchResults();\nfor (List<SearchResp.SearchResult> results : searchResults) {\n    System.out.println(\"TopK results:\");\n    for (SearchResp.SearchResult result : results) {\n        System.out.println(result);\n    }\n} \n\n// Output:\n// SearchResp.SearchResult(entity={color={\"label\":\"brown\",\"tag\":8414,\"coord\":[3,4,15],\"ref\":[[\"blue\",\"green\",\"pink\"],[\"red\",\"orange\",\"pink\"],[\"yellow\",\"pink\",\"green\"]]}, id=11}, score=1.18235, id=11)\n// SearchResp.SearchResult(entity={color={\"label\":\"yellow\",\"tag\":2846,\"coord\":[20,4,15],\"ref\":[[\"white\",\"black\",\"purple\"],[\"green\",\"black\",\"yellow\"],[\"red\",\"purple\",\"brown\"]]}, id=589}, score=1.1414992, id=589)\n// SearchResp.SearchResult(entity={color={\"label\":\"pink\",\"tag\":6744,\"coord\":[25,33,5],\"ref\":[[\"orange\",\"purple\",\"white\"],[\"white\",\"pink\",\"brown\"],[\"red\",\"pink\",\"red\"]]}, id=567}, score=1.1087029, id=567)\n\n","res = await client.search({\n    collection_name: \"test_collection\",\n    data: query_vectors,\n    filter: 'JSON_CONTAINS_ANY(color[\"coord\"], [4, 5])',\n    output_fields: [\"color\", \"id\"],\n    limit: 3\n})\n\nconsole.log(JSON.stringify(res.results, null, 4))\n\n// Output\n// \n// [\n//     {\n//         \"score\": 1.9083369970321655,\n//         \"id\": \"453\",\n//         \"color\": {\n//             \"label\": \"brown\",\n//             \"tag\": 8788,\n//             \"coord\": [\n//                 21,\n//                 18,\n//                 5\n//             ],\n//             \"ref\": [\n//                 [\n//                     \"pink\",\n//                     \"black\",\n//                     \"brown\"\n//                 ]\n//             ]\n//         }\n//     },\n//     {\n//         \"score\": 1.8944344520568848,\n//         \"id\": \"792\",\n//         \"color\": {\n//             \"label\": \"purple\",\n//             \"tag\": 8161,\n//             \"coord\": [\n//                 4,\n//                 38,\n//                 5\n//             ],\n//             \"ref\": [\n//                 [\n//                     \"red\",\n//                     \"white\",\n//                     \"grey\"\n//                 ]\n//             ]\n//         }\n//     },\n//     {\n//         \"score\": 1.8615753650665283,\n//         \"id\": \"272\",\n//         \"color\": {\n//             \"label\": \"grey\",\n//             \"tag\": 3400,\n//             \"coord\": [\n//                 5,\n//                 1,\n//                 32\n//             ],\n//             \"ref\": [\n//                 [\n//                     \"purple\",\n//                     \"green\",\n//                     \"white\"\n//                 ]\n//             ]\n//         }\n//     }\n// ]\n// \n","json_contains(x, 1) # => True (x contains 1.)\njson_contains(x, \"a\") # => False (x does not contain a member \"a\".)\n","json_contains(x, [1,2,3]) # => True (x contains [1,2,3].)\njson_contains(x, [3,2,1]) # => False (x does contain a member [3,2,1].)\n","json_contains_all(x, [1,2,8]) # => True (x contains 1, 2, and 8.)\njson_contains_all(x, [4,5,6]) # => False (x does not has a member 6.)\n","json_contains_any(x, [1,2,8]) # => True (x contains 1, 2, and 8.)\njson_contains_any(x, [4,5,6]) # => True (x contains 4 and 5.)\njson_contains_any(x, [6,9]) # => False (x contains none of 6 and 9.)\n"],"headingContent":"Use JSON Fields","anchorList":[{"label":"استخدام حقول JSON","href":"Use-JSON-Fields","type":1,"isActive":false},{"label":"نظرة عامة","href":"Overview","type":2,"isActive":false},{"label":"تعريف حقل JSON","href":"Define-JSON-field","type":2,"isActive":false},{"label":"إدراج قيم الحقول","href":"Insert-field-values","type":2,"isActive":false},{"label":"التصفية العددية الأساسية","href":"Basic-scalar-filtering","type":2,"isActive":false},{"label":"التصفية العددية المتقدمة","href":"Advanced-scalar-filtering","type":2,"isActive":false},{"label":"مرجع عن مرشحات JSON","href":"Reference-on-JSON-filters","type":2,"isActive":false}]}
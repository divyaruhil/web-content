{"codeList":["from pymilvus import MilvusClient\n\n# 1. Set up a Milvus client\nclient = MilvusClient(\n    uri=\"http://localhost:19530\"\n)\n\n# 2. Create a collection\nclient.create_collection(\n    collection_name=\"quick_setup\",\n    dimension=5,\n)\n","import com.google.gson.Gson;\nimport com.google.gson.JsonObject;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.common.ConsistencyLevel;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;\nimport io.milvus.v2.service.collection.request.DropCollectionReq;\nimport io.milvus.v2.service.partition.request.CreatePartitionReq;\nimport io.milvus.v2.service.vector.request.GetReq;\nimport io.milvus.v2.service.vector.request.InsertReq;\nimport io.milvus.v2.service.vector.response.GetResp;\nimport io.milvus.v2.service.vector.response.InsertResp;\n\nimport java.util.*;\n\nString CLUSTER_ENDPOINT = \"http://localhost:19530\";\n\n// 1. Connect to Milvus server\nConnectConfig connectConfig = ConnectConfig.builder()\n    .uri(CLUSTER_ENDPOINT)\n    .build();\n\nMilvusClientV2 client = new MilvusClientV2(connectConfig);  \n\n// 2. Create a collection in quick setup mode\nCreateCollectionReq quickSetupReq = CreateCollectionReq.builder()\n    .collectionName(\"quick_setup\")\n    .dimension(5)\n    .metricType(\"IP\")\n    .build();\n\nclient.createCollection(quickSetupReq);\n","const { MilvusClient, DataType, sleep } = require(\"@zilliz/milvus2-sdk-node\")\n\nconst address = \"http://localhost:19530\"\n\n// 1. Set up a Milvus Client\nclient = new MilvusClient({address}); \n\n// 2. Create a collection in quick setup mode\nawait client.createCollection({\n    collection_name: \"quick_setup\",\n    dimension: 5,\n}); \n","# 3. Insert randomly generated vectors \ncolors = [\"green\", \"blue\", \"yellow\", \"red\", \"black\", \"white\", \"purple\", \"pink\", \"orange\", \"brown\", \"grey\"]\ndata = []\n\nfor i in range(1000):\n    current_color = random.choice(colors)\n    current_tag = random.randint(1000, 9999)\n    data.append({\n        \"id\": i,\n        \"vector\": [ random.uniform(-1, 1) for _ in range(5) ],\n        \"color\": current_color,\n        \"tag\": current_tag,\n        \"color_tag\": f\"{current_color}_{str(current_tag)}\"\n    })\n\nprint(data[0])\n\n# Output\n#\n# {\n#     \"id\": 0,\n#     \"vector\": [\n#         0.7371107800002366,\n#         -0.7290389773227746,\n#         0.38367002049157417,\n#         0.36996000494220627,\n#         -0.3641898951462792\n#     ],\n#     \"color\": \"yellow\",\n#     \"tag\": 6781,\n#     \"color_tag\": \"yellow_6781\"\n# }\n\nres = client.insert(\n    collection_name=\"quick_setup\",\n    data=data\n)\n\nprint(res)\n\n# Output\n#\n# {\n#     \"insert_count\": 1000,\n#     \"ids\": [\n#         0,\n#         1,\n#         2,\n#         3,\n#         4,\n#         5,\n#         6,\n#         7,\n#         8,\n#         9,\n#         \"(990 more items hidden)\"\n#     ]\n# }\n","// 3. Insert randomly generated vectors into the collection\nList<String> colors = Arrays.asList(\"green\", \"blue\", \"yellow\", \"red\", \"black\", \"white\", \"purple\", \"pink\", \"orange\", \"brown\", \"grey\");\nList<JsonObject> data = new ArrayList<>();\nGson gson = new Gson();\nfor (int i=0; i<1000; i++) {\n    Random rand = new Random();\n    String current_color = colors.get(rand.nextInt(colors.size()-1));\n    int current_tag = rand.nextInt(8999) + 1000;\n    JsonObject row = new JsonObject();\n    row.addProperty(\"id\", (long) i);\n    row.add(\"vector\", gson.toJsonTree(Arrays.asList(rand.nextFloat(), rand.nextFloat(), rand.nextFloat(), rand.nextFloat(), rand.nextFloat())));\n    row.addProperty(\"color\", current_color);\n    row.addProperty(\"tag\", current_tag);\n    row.addProperty(\"color_tag\", current_color + '_' + String.valueOf(rand.nextInt(8999) + 1000));\n    data.add(row);\n}\n\nInsertReq insertReq = InsertReq.builder()\n        .collectionName(\"quick_setup\")\n        .data(data)\n        .build();\n\nInsertResp insertResp = client.insert(insertReq);\n\nSystem.out.println(insertResp.getInsertCnt());\n\n// Output:\n// 1000\n","// 3. Insert randomly generated vectors\nconst colors = [\"green\", \"blue\", \"yellow\", \"red\", \"black\", \"white\", \"purple\", \"pink\", \"orange\", \"brown\", \"grey\"]\nvar data = []\n\nfor (let i = 0; i < 1000; i++) {\n    current_color = colors[Math.floor(Math.random() * colors.length)]\n    current_tag = Math.floor(Math.random() * 8999 + 1000)\n    data.push({\n        \"id\": i,\n        \"vector\": [Math.random(), Math.random(), Math.random(), Math.random(), Math.random()],\n        \"color\": current_color,\n        \"tag\": current_tag,\n        \"color_tag\": `${current_color}_${current_tag}`\n    })\n}\n\nconsole.log(data[0])\n\n// Output\n// \n// {\n//   id: 0,\n//   vector: [\n//     0.16022394821966035,\n//     0.6514875214491056,\n//     0.18294484964044666,\n//     0.30227694168725394,\n//     0.47553087493572255\n//   ],\n//   color: 'blue',\n//   tag: 8907,\n//   color_tag: 'blue_8907'\n// }\n// \n\nres = await client.insert({\n    collection_name: \"quick_setup\",\n    data: data\n})\n\nconsole.log(res.insert_cnt)\n\n// Output\n// \n// 1000\n// \n","# 4. Create partitions and insert more entities\nclient.create_partition(\n    collection_name=\"quick_setup\",\n    partition_name=\"partitionA\"\n)\n\nclient.create_partition(\n    collection_name=\"quick_setup\",\n    partition_name=\"partitionB\"\n)\n\ndata = []\n\nfor i in range(1000, 1500):\n    current_color = random.choice(colors)\n    data.append({\n        \"id\": i,\n        \"vector\": [ random.uniform(-1, 1) for _ in range(5) ],\n        \"color\": current_color,\n        \"tag\": current_tag,\n        \"color_tag\": f\"{current_color}_{str(current_tag)}\"\n    })\n\nres = client.insert(\n    collection_name=\"quick_setup\",\n    data=data,\n    partition_name=\"partitionA\"\n)\n\nprint(res)\n\n# Output\n#\n# {\n#     \"insert_count\": 500,\n#     \"ids\": [\n#         1000,\n#         1001,\n#         1002,\n#         1003,\n#         1004,\n#         1005,\n#         1006,\n#         1007,\n#         1008,\n#         1009,\n#         \"(490 more items hidden)\"\n#     ]\n# }\n\ndata = []\n\nfor i in range(1500, 2000):\n    current_color = random.choice(colors)\n    data.append({\n        \"id\": i,\n        \"vector\": [ random.uniform(-1, 1) for _ in range(5) ],\n        \"color\": current_color,\n        \"tag\": current_tag,\n        \"color_tag\": f\"{current_color}_{str(current_tag)}\"\n    })\n\nres = client.insert(\n    collection_name=\"quick_setup\",\n    data=data,\n    partition_name=\"partitionB\"\n)\n\nprint(res)\n\n# Output\n#\n# {\n#     \"insert_count\": 500,\n#     \"ids\": [\n#         1500,\n#         1501,\n#         1502,\n#         1503,\n#         1504,\n#         1505,\n#         1506,\n#         1507,\n#         1508,\n#         1509,\n#         \"(490 more items hidden)\"\n#     ]\n# }\n","// 4. Create partitions and insert some more data\nCreatePartitionReq createPartitionReq = CreatePartitionReq.builder()\n        .collectionName(\"quick_setup\")\n        .partitionName(\"partitionA\")\n        .build();\n\nclient.createPartition(createPartitionReq);\n\ncreatePartitionReq = CreatePartitionReq.builder()\n        .collectionName(\"quick_setup\")\n        .partitionName(\"partitionB\")\n        .build();\n\nclient.createPartition(createPartitionReq);\n\ndata.clear();\n\nfor (int i=1000; i<1500; i++) {\n    Random rand = new Random();\n    String current_color = colors.get(rand.nextInt(colors.size()-1));\n    int current_tag = rand.nextInt(8999) + 1000;\n    JsonObject row = new JsonObject();\n    row.addProperty(\"id\", (long) i);\n    row.add(\"vector\", gson.toJsonTree(Arrays.asList(rand.nextFloat(), rand.nextFloat(), rand.nextFloat(), rand.nextFloat(), rand.nextFloat())));\n    row.addProperty(\"color\", current_color);\n    row.addProperty(\"tag\", current_tag);\n    data.add(row);\n}\n\ninsertReq = InsertReq.builder()\n        .collectionName(\"quick_setup\")\n        .data(data)\n        .partitionName(\"partitionA\")\n        .build();\n\ninsertResp = client.insert(insertReq);\n\nSystem.out.println(insertResp.getInsertCnt());\n\n// Output:\n// 500\n\ndata.clear();\n\nfor (int i=1500; i<2000; i++) {\n    Random rand = new Random();\n    String current_color = colors.get(rand.nextInt(colors.size()-1));\n    int current_tag = rand.nextInt(8999) + 1000;\n    JsonObject row = new JsonObject();\n    row.addProperty(\"id\", (long) i);\n    row.add(\"vector\", gson.toJsonTree(Arrays.asList(rand.nextFloat(), rand.nextFloat(), rand.nextFloat(), rand.nextFloat(), rand.nextFloat())));\n    row.addProperty(\"color\", current_color);\n    row.addProperty(\"tag\", current_tag);\n    data.add(row);\n}\n\ninsertReq = InsertReq.builder()\n        .collectionName(\"quick_setup\")\n        .data(data)\n        .partitionName(\"partitionB\")\n        .build();\n\ninsertResp = client.insert(insertReq);\n\nSystem.out.println(insertResp.getInsertCnt());\n\n// Output:\n// 500\n","// 4. Create partitions and insert more entities\nawait client.createPartition({\n    collection_name: \"quick_setup\",\n    partition_name: \"partitionA\"\n})\n\nawait client.createPartition({\n    collection_name: \"quick_setup\",\n    partition_name: \"partitionB\"\n})\n\ndata = []\n\nfor (let i = 1000; i < 1500; i++) {\n    current_color = colors[Math.floor(Math.random() * colors.length)]\n    current_tag = Math.floor(Math.random() * 8999 + 1000)\n    data.push({\n        \"id\": i,\n        \"vector\": [Math.random(), Math.random(), Math.random(), Math.random(), Math.random()],\n        \"color\": current_color,\n        \"tag\": current_tag,\n        \"color_tag\": `${current_color}_${current_tag}`\n    })\n}\n\nres = await client.insert({\n    collection_name: \"quick_setup\",\n    data: data,\n    partition_name: \"partitionA\"\n})\n\nconsole.log(res.insert_cnt)\n\n// Output\n// \n// 500\n// \n\nawait sleep(5000)\n\ndata = []\n\nfor (let i = 1500; i < 2000; i++) {\n    current_color = colors[Math.floor(Math.random() * colors.length)]\n    current_tag = Math.floor(Math.random() * 8999 + 1000)\n    data.push({\n        \"id\": i,\n        \"vector\": [Math.random(), Math.random(), Math.random(), Math.random(), Math.random()],\n        \"color\": current_color,\n        \"tag\": current_tag,\n        \"color_tag\": `${current_color}_${current_tag}`\n    })\n}\n\nres = await client.insert({\n    collection_name: \"quick_setup\",\n    data: data,\n    partition_name: \"partitionB\"\n})\n\nconsole.log(res.insert_cnt)\n\n// Output\n// \n// 500\n// \n","# 4. Get entities by ID\nres = client.get(\n    collection_name=\"quick_setup\",\n    ids=[0, 1, 2]\n)\n\nprint(res)\n\n# Output\n#\n# [\n#     {\n#         \"id\": 0,\n#         \"vector\": [\n#             0.68824464,\n#             0.6552274,\n#             0.33593303,\n#             -0.7099536,\n#             -0.07070546\n#         ],\n#         \"color_tag\": \"green_2006\",\n#         \"color\": \"green\"\n#     },\n#     {\n#         \"id\": 1,\n#         \"vector\": [\n#             -0.98531723,\n#             0.33456197,\n#             0.2844234,\n#             0.42886782,\n#             0.32753858\n#         ],\n#         \"color_tag\": \"white_9298\",\n#         \"color\": \"white\"\n#     },\n#     {\n#         \"id\": 2,\n#         \"vector\": [\n#             -0.9886812,\n#             -0.44129863,\n#             -0.29859528,\n#             0.06059075,\n#             -0.43817034\n#         ],\n#         \"color_tag\": \"grey_5312\",\n#         \"color\": \"grey\"\n#     }\n# ]\n","// 5. Get entities by ID\nGetReq getReq = GetReq.builder()\n        .collectionName(\"quick_setup\")\n        .ids(Arrays.asList(0L, 1L, 2L))\n        .build();\n\nGetResp entities = client.get(getReq);\n\nSystem.out.println(entities.getGetResults());\n\n// Output:\n// [\n//  QueryResp.QueryResult(entity={color=blue, color_tag=blue_4025, vector=[0.64311606, 0.73486423, 0.7352375, 0.7020566, 0.9885356], id=0, tag=4018}),\n//  QueryResp.QueryResult(entity={color=red, color_tag=red_4788, vector=[0.27244627, 0.7068031, 0.25976115, 0.69258106, 0.8767045], id=1, tag=6611}),\n//  QueryResp.QueryResult(entity={color=yellow, color_tag=yellow_8382, vector=[0.19625628, 0.40176708, 0.13231951, 0.50702184, 0.88406855], id=2, tag=5349})\n//]\n\n","// 5. Get entities by id\nres = await client.get({\n    collection_name: \"quick_setup\",\n    ids: [0, 1, 2],\n    output_fields: [\"vector\", \"color_tag\"]\n})\n\nconsole.log(res.data)\n\n// Output\n// \n// [\n//   {\n//     vector: [\n//       0.16022394597530365,\n//       0.6514875292778015,\n//       0.18294484913349152,\n//       0.30227693915367126,\n//       0.47553086280822754\n//     ],\n//     '$meta': { color: 'blue', tag: 8907, color_tag: 'blue_8907' },\n//     id: '0'\n//   },\n//   {\n//     vector: [\n//       0.2459285855293274,\n//       0.4974019527435303,\n//       0.2154673933982849,\n//       0.03719571232795715,\n//       0.8348019123077393\n//     ],\n//     '$meta': { color: 'grey', tag: 3710, color_tag: 'grey_3710' },\n//     id: '1'\n//   },\n//   {\n//     vector: [\n//       0.9404329061508179,\n//       0.49662265181541443,\n//       0.8088793158531189,\n//       0.9337621331214905,\n//       0.8269071578979492\n//     ],\n//     '$meta': { color: 'blue', tag: 2993, color_tag: 'blue_2993' },\n//     id: '2'\n//   }\n// ]\n// \n","# 5. Get entities from partitions\nres = client.get(\n    collection_name=\"quick_setup\",\n    ids=[1000, 1001, 1002],\n    partition_names=[\"partitionA\"]\n)\n\nprint(res)\n\n# Output\n#\n# [\n#     {\n#         \"color\": \"green\",\n#         \"tag\": 1995,\n#         \"color_tag\": \"green_1995\",\n#         \"id\": 1000,\n#         \"vector\": [\n#             0.7807706,\n#             0.8083741,\n#             0.17276904,\n#             -0.8580777,\n#             0.024156934\n#         ]\n#     },\n#     {\n#         \"color\": \"red\",\n#         \"tag\": 1995,\n#         \"color_tag\": \"red_1995\",\n#         \"id\": 1001,\n#         \"vector\": [\n#             0.065074645,\n#             -0.44882354,\n#             -0.29479212,\n#             -0.19798489,\n#             -0.77542555\n#         ]\n#     },\n#     {\n#         \"color\": \"green\",\n#         \"tag\": 1995,\n#         \"color_tag\": \"green_1995\",\n#         \"id\": 1002,\n#         \"vector\": [\n#             0.027934508,\n#             -0.44199976,\n#             -0.40262738,\n#             -0.041511405,\n#             0.024782438\n#         ]\n#     }\n# ]\n","// 5. Get entities by ID in a partition\ngetReq = GetReq.builder()\n        .collectionName(\"quick_setup\")\n        .ids(Arrays.asList(1001L, 1002L, 1003L))\n        .partitionName(\"partitionA\")\n        .build();\n\nentities = client.get(getReq);\n\nSystem.out.println(entities.getGetResults());\n\n// Output:\n// [\n//  QueryResp.QueryResult(entity={color=pink, vector=[0.28847772, 0.5116072, 0.5695933, 0.49643654, 0.3461541], id=1001, tag=9632}), \n//  QueryResp.QueryResult(entity={color=blue, vector=[0.22428268, 0.8648047, 0.78426147, 0.84020555, 0.60779166], id=1002, tag=4523}), \n//  QueryResp.QueryResult(entity={color=white, vector=[0.4081068, 0.9027214, 0.88685805, 0.38036376, 0.27950126], id=1003, tag=9321})\n// ]\n","// 5.1 Get entities by id in a partition\nres = await client.get({\n    collection_name: \"quick_setup\",\n    ids: [1000, 1001, 1002],\n    partition_names: [\"partitionA\"],\n    output_fields: [\"vector\", \"color_tag\"]\n})\n\nconsole.log(res.data)\n\n// Output\n// \n// [\n//   {\n//     id: '1000',\n//     vector: [\n//       0.014254206791520119,\n//       0.5817716121673584,\n//       0.19793470203876495,\n//       0.8064294457435608,\n//       0.7745839357376099\n//     ],\n//     '$meta': { color: 'white', tag: 5996, color_tag: 'white_5996' }\n//   },\n//   {\n//     id: '1001',\n//     vector: [\n//       0.6073881983757019,\n//       0.05214758217334747,\n//       0.730999231338501,\n//       0.20900958776474,\n//       0.03665429726243019\n//     ],\n//     '$meta': { color: 'grey', tag: 2834, color_tag: 'grey_2834' }\n//   },\n//   {\n//     id: '1002',\n//     vector: [\n//       0.48877206444740295,\n//       0.34028753638267517,\n//       0.6527213454246521,\n//       0.9763909578323364,\n//       0.8031482100486755\n//     ],\n//     '$meta': { color: 'pink', tag: 9107, color_tag: 'pink_9107' }\n//   }\n// ]\n// \n","# 6. Use basic operators\n\nres = client.query(\n    collection_name=\"quick_setup\",\n    filter=\"1000 < tag < 1500\",\n    output_fields=[\"color_tag\"],\n    limit=3\n)\n\nprint(res)\n\n# Output\n#\n# [\n#     {\n#         \"id\": 1,\n#         \"color_tag\": \"pink_1023\"\n#     },\n#     {\n#         \"id\": 41,\n#         \"color_tag\": \"red_1483\"\n#     },\n#     {\n#         \"id\": 44,\n#         \"color_tag\": \"grey_1146\"\n#     }\n# ]\n","// 6. Use basic operators\n\nQueryReq queryReq = QueryReq.builder()\n    .collectionName(\"quick_setup\")\n    .filter(\"1000 < tag < 1500\")\n    .outputFields(Arrays.asList(\"color_tag\"))\n    .limit(3)\n    .build();\n\nQueryResp queryResp = client.query(queryReq);\n\nSystem.out.println(JSONObject.toJSON(queryResp));\n\n// Output:\n// {\"queryResults\": [\n//     {\"entity\": {\n//         \"color_tag\": \"white_7588\",\n//         \"id\": 34\n//     }},\n//     {\"entity\": {\n//         \"color_tag\": \"orange_4989\",\n//         \"id\": 64\n//     }},\n//     {\"entity\": {\n//         \"color_tag\": \"white_3415\",\n//         \"id\": 73\n//     }}\n// ]}\n","// 6. Use basic operators\nres = await client.query({\n    collection_name: \"quick_setup\",\n    filter: \"1000 < tag < 1500\",\n    output_fields: [\"color_tag\"],\n    limit: 3\n})\n\nconsole.log(res.data)\n\n// Output\n// \n// [\n//   {\n//     '$meta': { color: 'pink', tag: 1050, color_tag: 'pink_1050' },\n//     id: '6'\n//   },\n//   {\n//     '$meta': { color: 'purple', tag: 1174, color_tag: 'purple_1174' },\n//     id: '24'\n//   },\n//   {\n//     '$meta': { color: 'orange', tag: 1023, color_tag: 'orange_1023' },\n//     id: '40'\n//   }\n// ]\n// \n","res = client.query(\n    collection_name=\"quick_setup\",\n    filter='color == \"brown\"',\n    output_fields=[\"color_tag\"],\n    limit=3\n)\n\nprint(res)\n\n# Output\n#\n# [\n#     {\n#         \"color_tag\": \"brown_5343\",\n#         \"id\": 15\n#     },\n#     {\n#         \"color_tag\": \"brown_3167\",\n#         \"id\": 27\n#     },\n#     {\n#         \"color_tag\": \"brown_3100\",\n#         \"id\": 30\n#     }\n# ]\n","queryReq = QueryReq.builder()\n    .collectionName(\"quick_setup\")\n    .filter(\"color == \\\"brown\\\"\")\n    .outputFields(Arrays.asList(\"color_tag\"))\n    .limit(3)\n    .build();\n\nqueryResp = client.query(queryReq);\n\nSystem.out.println(JSONObject.toJSON(queryResp));\n\n// Output:\n// {\"queryResults\": [\n//     {\"entity\": {\n//         \"color_tag\": \"brown_7792\",\n//         \"id\": 3\n//     }},\n//     {\"entity\": {\n//         \"color_tag\": \"brown_9695\",\n//         \"id\": 7\n//     }},\n//     {\"entity\": {\n//         \"color_tag\": \"brown_2551\",\n//         \"id\": 15\n//     }}\n// ]}\n","res = await client.query({\n    collection_name: \"quick_setup\",\n    filter: 'color == \"brown\"',\n    output_fields: [\"color_tag\"],\n    limit: 3\n})\n\nconsole.log(res.data)\n\n// Output\n// \n// [\n//   {\n//     '$meta': { color: 'brown', tag: 6839, color_tag: 'brown_6839' },\n//     id: '22'\n//   },\n//   {\n//     '$meta': { color: 'brown', tag: 7849, color_tag: 'brown_7849' },\n//     id: '32'\n//   },\n//   {\n//     '$meta': { color: 'brown', tag: 7855, color_tag: 'brown_7855' },\n//     id: '33'\n//   }\n// ]\n// \n","res = client.query(\n    collection_name=\"quick_setup\",\n    filter='color not in [\"green\", \"purple\"]',\n    output_fields=[\"color_tag\"],\n    limit=3\n)\n\nprint(res)\n\n# Output\n#\n# [\n#     {\n#         \"color_tag\": \"yellow_6781\",\n#         \"id\": 0\n#     },\n#     {\n#         \"color_tag\": \"pink_1023\",\n#         \"id\": 1\n#     },\n#     {\n#         \"color_tag\": \"blue_3972\",\n#         \"id\": 2\n#     }\n# ]\n","queryReq = QueryReq.builder()\n    .collectionName(\"quick_setup\")\n    .filter(\"color not in [\\\"green\\\", \\\"purple\\\"]\")\n    .outputFields(Arrays.asList(\"color_tag\"))\n    .limit(3)\n    .build();\n\nqueryResp = client.query(queryReq);\n\nSystem.out.println(JSONObject.toJSON(queryResp));   \n\n// Output:\n// {\"queryResults\": [\n//     {\"entity\": {\n//         \"color_tag\": \"white_4597\",\n//         \"id\": 0\n//     }},\n//     {\"entity\": {\n//         \"color_tag\": \"white_8708\",\n//         \"id\": 2\n//     }},\n//     {\"entity\": {\n//         \"color_tag\": \"brown_7792\",\n//         \"id\": 3\n//     }}\n// ]}\n","res = await client.query({\n    collection_name: \"quick_setup\",\n    filter: 'color not in [\"green\", \"purple\"]',\n    output_fields: [\"color_tag\"],\n    limit: 3\n})\n\nconsole.log(res.data)\n\n// Output\n// \n// [\n//   {\n//     '$meta': { color: 'blue', tag: 8907, color_tag: 'blue_8907' },\n//     id: '0'\n//   },\n//   {\n//     '$meta': { color: 'grey', tag: 3710, color_tag: 'grey_3710' },\n//     id: '1'\n//   },\n//   {\n//     '$meta': { color: 'blue', tag: 2993, color_tag: 'blue_2993' },\n//     id: '2'\n//   }\n// ]\n// \n","res = client.query(\n    collection_name=\"quick_setup\",\n    filter='color_tag like \"red%\"',\n    output_fields=[\"color_tag\"],\n    limit=3\n)\n\nprint(res)\n\n# Output\n#\n# [\n#     {\n#         \"color_tag\": \"red_6443\",\n#         \"id\": 17\n#     },\n#     {\n#         \"color_tag\": \"red_1483\",\n#         \"id\": 41\n#     },\n#     {\n#         \"color_tag\": \"red_4348\",\n#         \"id\": 47\n#     }\n# ]\n","queryReq = QueryReq.builder()\n    .collectionName(\"quick_setup\")\n    .filter(\"color_tag like \\\"red%\\\"\")\n    .outputFields(Arrays.asList(\"color_tag\"))\n    .limit(3)\n    .build();\n\nqueryResp = client.query(queryReq);\n\nSystem.out.println(JSONObject.toJSON(queryResp));  \n\n// Output:\n// {\"queryResults\": [\n//     {\"entity\": {\n//         \"color_tag\": \"red_4929\",\n//         \"id\": 9\n//     }},\n//     {\"entity\": {\n//         \"color_tag\": \"red_8284\",\n//         \"id\": 13\n//     }},\n//     {\"entity\": {\n//         \"color_tag\": \"red_3021\",\n//         \"id\": 44\n//     }}\n// ]}\n","res = await client.query({\n    collection_name: \"quick_setup\",\n    filter: 'color_tag like \"red%\"',\n    output_fields: [\"color_tag\"],\n    limit: 3\n})\n\nconsole.log(res.data)\n\n// Output\n// \n// [\n//   {\n//     '$meta': { color: 'red', tag: 8773, color_tag: 'red_8773' },\n//     id: '17'\n//   },\n//   {\n//     '$meta': { color: 'red', tag: 9197, color_tag: 'red_9197' },\n//     id: '34'\n//   },\n//   {\n//     '$meta': { color: 'red', tag: 7914, color_tag: 'red_7914' },\n//     id: '46'\n//   }\n// ]\n// \n","res = client.query(\n    collection_name=\"quick_setup\",\n    filter='(color == \"red\") and (1000 < tag < 1500)',\n    output_fields=[\"color_tag\"],\n    limit=3\n)\n\nprint(res)\n\n# Output\n#\n# [\n#     {\n#         \"color_tag\": \"red_1483\",\n#         \"id\": 41\n#     },\n#     {\n#         \"color_tag\": \"red_1100\",\n#         \"id\": 94\n#     },\n#     {\n#         \"color_tag\": \"red_1343\",\n#         \"id\": 526\n#     }\n# ]\n","queryReq = QueryReq.builder()\n    .collectionName(\"quick_setup\")\n    .filter(\"(color == \\\"red\\\") and (1000 < tag < 1500)\")\n    .outputFields(Arrays.asList(\"color_tag\"))\n    .limit(3)\n    .build();\n\nqueryResp = client.query(queryReq);\n\nSystem.out.println(JSONObject.toJSON(queryResp));  \n\n// Output:\n// {\"queryResults\": [\n//     {\"entity\": {\n//         \"color_tag\": \"red_8124\",\n//         \"id\": 83\n//     }},\n//     {\"entity\": {\n//         \"color_tag\": \"red_5358\",\n//         \"id\": 501\n//     }},\n//     {\"entity\": {\n//         \"color_tag\": \"red_3564\",\n//         \"id\": 638\n//     }}\n// ]}\n","res = await client.query({\n    collection_name: \"quick_setup\",\n    filter: '(color == \"red\") and (1000 < tag < 1500)',\n    output_fields: [\"color_tag\"],\n    limit: 3\n})\n\nconsole.log(res.data)\n\n// Output\n// \n// [\n//   {\n//     '$meta': { color: 'red', tag: 1436, color_tag: 'red_1436' },\n//     id: '67'\n//   },\n//   {\n//     '$meta': { color: 'red', tag: 1463, color_tag: 'red_1463' },\n//     id: '160'\n//   },\n//   {\n//     '$meta': { color: 'red', tag: 1073, color_tag: 'red_1073' },\n//     id: '291'\n//   }\n// ]\n// \n","# 7. Use advanced operators\n\n# Count the total number of entities in a collection\nres = client.query(\n    collection_name=\"quick_setup\",\n    output_fields=[\"count(*)\"]\n)\n\nprint(res)\n\n# Output\n#\n# [\n#     {\n#         \"count(*)\": 2000\n#     }\n# ]\n","// 7. Use advanced operators\n// Count the total number of entities in the collection\nqueryReq = QueryReq.builder()\n    .collectionName(\"quick_setup\")\n    .filter(\"\")\n    .outputFields(Arrays.asList(\"count(*)\"))\n    .build();\n\nqueryResp = client.query(queryReq);\n\nSystem.out.println(JSONObject.toJSON(queryResp));\n\n// Output:\n// {\"queryResults\": [{\"entity\": {\"count(*)\": 2000}}]}\n","// 7. Use advanced operators\n// Count the total number of entities in a collection\nres = await client.query({\n    collection_name: \"quick_setup\",\n    output_fields: [\"count(*)\"]\n})\n\nconsole.log(res.data)   \n\n// Output\n// \n// [ { 'count(*)': '2000' } ]\n// \n","# Count the number of entities in a partition\nres = client.query(\n    collection_name=\"quick_setup\",\n    output_fields=[\"count(*)\"],\n    partition_names=[\"partitionA\"]\n)\n\nprint(res)\n\n# Output\n#\n# [\n#     {\n#         \"count(*)\": 500\n#     }\n# ]\n","// Count the number of entities in a partition\nqueryReq = QueryReq.builder()\n    .collectionName(\"quick_setup\")\n    .partitionNames(Arrays.asList(\"partitionA\"))\n    .filter(\"\")\n    .outputFields(Arrays.asList(\"count(*)\"))\n    .build();\n\nqueryResp = client.query(queryReq);\n\nSystem.out.println(JSONObject.toJSON(queryResp));\n\n// Output:\n// {\"queryResults\": [{\"entity\": {\"count(*)\": 500}}]}\n","// Count the number of entities in a partition\nres = await client.query({\n    collection_name: \"quick_setup\",\n    output_fields: [\"count(*)\"],\n    partition_names: [\"partitionA\"]\n})\n\nconsole.log(res.data)     \n\n// Output\n// \n// [ { 'count(*)': '500' } ]\n// \n","# Count the number of entities that match a specific filter\nres = client.query(\n    collection_name=\"quick_setup\",\n    filter='(color == \"red\") and (1000 < tag < 1500)',\n    output_fields=[\"count(*)\"],\n)\n\nprint(res)\n\n# Output\n#\n# [\n#     {\n#         \"count(*)\": 3\n#     }\n# ]\n","// Count the number of entities that match a specific filter\nqueryReq = QueryReq.builder()\n    .collectionName(\"quick_setup\")\n    .filter(\"(color == \\\"red\\\") and (1000 < tag < 1500)\")\n    .outputFields(Arrays.asList(\"count(*)\"))\n    .build();\n\nqueryResp = client.query(queryReq);\n\nSystem.out.println(JSONObject.toJSON(queryResp));\n\n// Output:\n// {\"queryResults\": [{\"entity\": {\"count(*)\": 7}}]}\n","// Count the number of entities that match a specific filter\nres = await client.query({\n    collection_name: \"quick_setup\",\n    filter: '(color == \"red\") and (1000 < tag < 1500)',\n    output_fields: [\"count(*)\"]\n})\n\nconsole.log(res.data)   \n\n// Output\n// \n// [ { 'count(*)': '10' } ]\n// \n"],"headingContent":"Get & Scalar Query","anchorList":[{"label":"Dapatkan & Kueri Skalar","href":"Get--Scalar-Query","type":1,"isActive":false},{"label":"Ikhtisar","href":"Overview","type":2,"isActive":false},{"label":"Persiapan","href":"Preparations","type":2,"isActive":false},{"label":"Mendapatkan Entitas berdasarkan ID","href":"Get-Entities-by-ID","type":2,"isActive":false},{"label":"Menggunakan Operator Dasar","href":"Use-Basic-Operators","type":2,"isActive":false},{"label":"Menggunakan Operator Tingkat Lanjut","href":"Use-Advanced-Operators","type":2,"isActive":false},{"label":"Referensi tentang filter skalar","href":"Reference-on-scalar-filters","type":2,"isActive":false}]}
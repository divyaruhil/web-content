{"codeList":["from pymilvus import MilvusClient, DataType\n\n# 1. Set up a Milvus client\nclient = MilvusClient(\n    uri=\"http://localhost:19530\"\n)\n\n# 2. Create a collection\nclient.create_collection(\n    collection_name=\"quick_setup\",\n    dimension=5,\n)\n\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;\n\nString CLUSTER_ENDPOINT = \"http://localhost:19530\";\n\n// 1. Connect to Milvus server\nConnectConfig connectConfig = ConnectConfig.builder()\n    .uri(CLUSTER_ENDPOINT)\n    .build();\n\nMilvusClientV2 client = new MilvusClientV2(connectConfig);\n\n// 2. Create a collection in quick setup mode\nCreateCollectionReq quickSetupReq = CreateCollectionReq.builder()\n    .collectionName(\"quick_setup\")\n    .dimension(5)\n    .build();\n\nclient.createCollection(quickSetupReq);\n","const address = \"http://localhost:19530\"\n\n// 1. Set up a Milvus Client\nclient = new MilvusClient({address});\n\n// 2. Create a collection in quick setup mode\nawait client.createCollection({\n    collection_name: \"quick_setup\",\n    dimension: 5,\n});  \n","# 3. List partitions\nres = client.list_partitions(collection_name=\"quick_setup\")\nprint(res)\n\n# Output\n#\n# [\"_default\"]\n","import io.milvus.v2.service.partition.request.ListPartitionsReq;\n\n// 3. List all partitions in the collection\nListPartitionsReq listPartitionsReq = ListPartitionsReq.builder()\n    .collectionName(\"quick_setup\")\n    .build();\n\nList<String> partitionNames = client.listPartitions(listPartitionsReq);\n\nSystem.out.println(partitionNames);\n\n// Output:\n// [\"_default\"]\n","// 3. List partitions\nres = await client.listPartitions({\n    collection_name: \"quick_setup\"\n})\n\nconsole.log(res.partition_names)\n\n// Output\n// \n// [ '_default' ]\n// \n","# 4. Create more partitions\nclient.create_partition(\n    collection_name=\"quick_setup\",\n    partition_name=\"partitionA\"\n)\n\nclient.create_partition(\n    collection_name=\"quick_setup\",\n    partition_name=\"partitionB\"\n)\n\nres = client.list_partitions(collection_name=\"quick_setup\")\nprint(res)\n\n# Output\n#\n# [\"_default\", \"partitionA\", \"partitionB\"]\n","import io.milvus.v2.service.partition.request.CreatePartitionReq;\n\n// 4. Create more partitions\nCreatePartitionReq createPartitionReq = CreatePartitionReq.builder()\n    .collectionName(\"quick_setup\")\n    .partitionName(\"partitionA\")\n    .build();\n\nclient.createPartition(createPartitionReq);\n\ncreatePartitionReq = CreatePartitionReq.builder()\n    .collectionName(\"quick_setup\")\n    .partitionName(\"partitionB\")\n    .build();\n\nclient.createPartition(createPartitionReq);\n\nlistPartitionsReq = ListPartitionsReq.builder()\n    .collectionName(\"quick_setup\")\n    .build();\n\npartitionNames = client.listPartitions(listPartitionsReq);\n\nSystem.out.println(partitionNames);\n\n// Output:\n// [\n//     \"_default\",\n//     \"partitionA\",\n//     \"partitionB\"\n// ]\n","// 4. Create more partitions\nawait client.createPartition({\n    collection_name: \"quick_setup\",\n    partition_name: \"partitionA\"\n})\n\nawait client.createPartition({\n    collection_name: \"quick_setup\",\n    partition_name: \"partitionB\"\n})\n\nres = await client.listPartitions({\n    collection_name: \"quick_setup\"\n})\n\nconsole.log(res.partition_names)\n\n// Output\n// \n// [ '_default', 'partitionA', 'partitionB' ]\n// \n","# 5. Check whether a partition exists\nres = client.has_partition(\n    collection_name=\"quick_setup\",\n    partition_name=\"partitionA\"\n)\nprint(res)\n\n# Output\n#\n# True\n\nres = client.has_partition(\n    collection_name=\"quick_setup\",\n    partition_name=\"partitionC\"\n)\nprint(res)\n\n# Output\n#\n# False\n","import io.milvus.v2.service.partition.request.HasPartitionReq;\n\n// 5. Check whether a partition exists\nHasPartitionReq hasPartitionReq = HasPartitionReq.builder()\n    .collectionName(\"quick_setup\")\n    .partitionName(\"partitionA\")\n    .build();\n\nboolean exists = client.hasPartition(hasPartitionReq);\n\nSystem.out.println(exists);\n\n// Output:\n// true\n\nhasPartitionReq = HasPartitionReq.builder()\n    .collectionName(\"quick_setup\")\n    .partitionName(\"partitionC\")\n    .build();\n\nexists = client.hasPartition(hasPartitionReq);\n\nSystem.out.println(exists);\n\n// Output:\n// false\n","// 5. Check whether a partition exists\nres = await client.hasPartition({\n    collection_name: \"quick_setup\",\n    partition_name: \"partitionA\"\n})\n\nconsole.log(res.value)\n\n// Output\n// \n// true\n// \n\nres = await client.hasPartition({\n    collection_name: \"quick_setup\",\n    partition_name: \"partitionC\"\n})\n\nconsole.log(res.value)\n\n// Output\n// \n// false\n// \n","# Release the collection\nclient.release_collection(collection_name=\"quick_setup\")\n\n# Check the load status\nres = client.get_load_state(collection_name=\"quick_setup\")\nprint(res)\n\n# Output\n#\n# {\n#     \"state\": \"<LoadState: Loaded>\"\n# }\n\nres = client.get_load_state(\n    collection_name=\"quick_setup\", \n    partition_name=\"partitionA\"\n)\n\nprint(res)\n\n# Output\n#\n# {\n#     \"state\": \"<LoadState: Loaded>\"\n# }\n\nres = client.get_load_state(\n    collection_name=\"quick_setup\", \n    partition_name=\"partitionB\"\n)\n\nprint(res)\n\n# Output\n#\n# {\n#     \"state\": \"<LoadState: NotLoad>\"\n# }\n\n","import io.milvus.v2.service.collection.request.GetLoadStateReq;\nimport io.milvus.v2.service.collection.request.ReleaseCollectionReq;\nimport io.milvus.v2.service.partition.request.LoadPartitionsReq;\nimport io.milvus.v2.service.partition.request.ReleasePartitionsReq;\n\n// 6. Load a partition independantly\n// 6.1 Release the collection\nReleaseCollectionReq releaseCollectionReq = ReleaseCollectionReq.builder()\n    .collectionName(\"quick_setup\")\n    .build();\n\nclient.releaseCollection(releaseCollectionReq);\n\n// 6.2 Load partitionA\nLoadPartitionsReq loadPartitionsReq = LoadPartitionsReq.builder()\n    .collectionName(\"quick_setup\")\n    .partitionNames(List.of(\"partitionA\"))\n    .build();\n\nclient.loadPartitions(loadPartitionsReq);\n\nThread.sleep(3000);\n\n// 6.3 Check the load status of the collection and its partitions\nGetLoadStateReq getLoadStateReq = GetLoadStateReq.builder()\n    .collectionName(\"quick_setup\")\n    .build();\n\nboolean state = client.getLoadState(getLoadStateReq);\n\nSystem.out.println(state);\n\n// Output:\n// true\n\ngetLoadStateReq = GetLoadStateReq.builder()\n    .collectionName(\"quick_setup\")\n    .partitionName(\"partitionA\")\n    .build();\n\nstate = client.getLoadState(getLoadStateReq);\n\nSystem.out.println(state);\n\n// Output:\n// true\n\ngetLoadStateReq = GetLoadStateReq.builder()\n    .collectionName(\"quick_setup\")\n    .partitionName(\"partitionB\")\n    .build();\n\nstate = client.getLoadState(getLoadStateReq);\n\nSystem.out.println(state);\n\n// Output:\n// false\n","// 6. Load a partition indenpendantly\nawait client.releaseCollection({\n    collection_name: \"quick_setup\"\n})\n\nres = await client.getLoadState({\n    collection_name: \"quick_setup\"\n})\n\nconsole.log(res.state)\n\n// Output\n// \n// LoadStateNotLoad\n// \n\nawait client.loadPartitions({\n    collection_name: \"quick_setup\",\n    partition_names: [\"partitionA\"]\n})\n\nawait sleep(3000)\n\nres = await client.getLoadState({\n    collection_name: \"quick_setup\"\n})\n\nconsole.log(res.state)\n\n// Output\n// \n// LoadStateLoaded\n// \n\nres = await client.getLoadState({\n    collection_name: \"quick_setup\",\n    partition_name: \"partitionA\"\n})\n\nconsole.log(res.state)\n\n// Output\n// \n// LoadStateLoaded\n// \n\nres = await client.getLoadState({\n    collection_name: \"quick_setup\",\n    partition_name: \"partitionB\"\n})\n\nconsole.log(res.state)\n\n// Output\n// \n// LoadStateLoaded\n// \n","client.load_partitions(\n    collection_name=\"quick_setup\",\n    partition_names=[\"partitionA\"]\n)\n\nres = client.get_load_state(collection_name=\"quick_setup\")\nprint(res)\n\n# Output\n#\n# {\n#     \"state\": \"<LoadState: Loaded>\"\n# }\n","LoadPartitionsReq loadPartitionsReq = LoadPartitionsReq.builder()\n    .collectionName(\"quick_setup\")\n    .partitionNames(List.of(\"partitionA\"))\n    .build();\n\nclient.loadPartitions(loadPartitionsReq);\n\ngetLoadStateReq = GetLoadStateReq.builder()\n    .collectionName(\"quick_setup\")\n    .partitionName(\"partitionA\")\n    .build();\n\nstate = client.getLoadState(getLoadStateReq);\n\nSystem.out.println(state);\n\n// Output:\n// true\n","await client.loadPartitions({\n    collection_name: \"quick_setup\",\n    partition_names: [\"partitionA\"]\n})\n\nres = await client.getLoadState({\n    collection_name: \"quick_setup\",\n    partition_name: \"partitionA\"\n})\n\nconsole.log(res.state)\n\n// Output\n// \n// LoadStateLoaded\n//\n","client.load_partitions(\n    collection_name=\"quick_setup\",\n    partition_names=[\"partitionA\", \"partitionB\"]\n)\n\nres = client.get_load_state(\n    collection_name=\"quick_setup\",\n    partition_name=\"partitionA\"\n)\n\n# Output\n#\n# {\n#     \"state\": \"<LoadState: Loaded>\"\n# }\n\nres = client.get_load_state(\n    collection_name=\"quick_setup\",\n    partition_name=\"partitionB\"\n)\n\n# Output\n#\n# {\n#     \"state\": \"<LoadState: Loaded>\"\n# }\n","LoadPartitionsReq loadPartitionsReq = LoadPartitionsReq.builder()\n    .collectionName(\"quick_setup\")\n    .partitionNames(List.of(\"partitionA\", \"partitionB\"))\n    .build();\n\nclient.loadPartitions(loadPartitionsReq);\n\ngetLoadStateReq = GetLoadStateReq.builder()\n    .collectionName(\"quick_setup\")\n    .partitionName(\"partitionA\")\n    .build();\n\nstate = client.getLoadState(getLoadStateReq);\n\nSystem.out.println(state);\n\n// Output:\n// true\n\ngetLoadStateReq = GetLoadStateReq.builder()\n    .collectionName(\"quick_setup\")\n    .partitionName(\"partitionB\")\n    .build();\n\nstate = client.getLoadState(getLoadStateReq);\n\nSystem.out.println(state);\n\n// Output:\n// true\n","await client.loadPartitions({\n    collection_name: \"quick_setup\",\n    partition_names: [\"partitionA\", \"partitionB\"]\n})\n\nres = await client.getLoadState({\n    collection_name: \"quick_setup\",\n    partition_name: \"partitionA\"\n})\n\nconsole.log(res)\n\n// Output\n// \n// LoadStateLoaded\n// \n\nres = await client.getLoadState({\n    collection_name: \"quick_setup\",\n    partition_name: \"partitionB\"\n})\n\nconsole.log(res)\n\n// Output\n// \n// LoadStateLoaded\n// \n","client.load_partitions(\n    collection_name=\"quick_setup\",\n    partition_names=[\"partitionA\"],\n    load_fields=[\"id\", \"vector\"],\n    skip_load_dynamic_field=True\n)\n","# 7. Release a partition\nclient.release_partitions(\n    collection_name=\"quick_setup\",\n    partition_names=[\"partitionA\"]\n)\n\nres = client.get_load_state(\n    collection_name=\"quick_setup\", \n    partition_name=\"partitionA\"\n)\n\nprint(res)\n\n# Output\n#\n# {\n#     \"state\": \"<LoadState: NotLoad>\"\n# }\n\n","import io.milvus.v2.service.partition.request.ReleasePartitionsReq;\n\n// 7. Release a partition\nReleasePartitionsReq releasePartitionsReq = ReleasePartitionsReq.builder()\n    .collectionName(\"quick_setup\")\n    .partitionNames(List.of(\"partitionA\"))\n    .build();\n\nclient.releasePartitions(releasePartitionsReq);\n\ngetLoadStateReq = GetLoadStateReq.builder()\n    .collectionName(\"quick_setup\")\n    .partitionName(\"partitionA\")\n    .build();\n\nstate = client.getLoadState(getLoadStateReq);\n\nSystem.out.println(state);\n\n// Output:\n// false\n","// 7. Release a partition\nawait client.releasePartitions({\n    collection_name: \"quick_setup\",\n    partition_names: [\"partitionA\"]\n})\n\nres = await client.getLoadState({\n    collection_name: \"quick_setup\"\n})\n\nconsole.log(res.state)\n\n// Output\n// \n// LoadStateNotLoad\n// \n","client.release_partitions(\n    collection_name=\"quick_setup\",\n    partition_names=[\"_default\", \"partitionA\", \"partitionB\"]\n)\n\nres = client.get_load_state(\n    collection_name=\"quick_setup\",\n)\n\n# Output\n#\n# {\n#     \"state\": \"<LoadState: NotLoad>\"\n# }\n","# 8. Drop a partition\nclient.drop_partition(\n    collection_name=\"quick_setup\",\n    partition_name=\"partitionB\"\n)\n\nres = client.list_partitions(collection_name=\"quick_setup\")\nprint(res)\n\n# Output\n#\n# [\"_default\", \"partitionA\"]\n","import io.milvus.v2.service.partition.request.ReleasePartitionsReq;\n\nReleasePartitionsReq releasePartitionsReq = ReleasePartitionsReq.builder()\n    .collectionName(\"quick_setup\")\n    .partitionNames(List.of(\"_default\", \"partitionA\", \"partitionB\"))\n    .build();\n\nclient.releasePartitions(releasePartitionsReq);\n\ngetLoadStateReq = GetLoadStateReq.builder()\n    .collectionName(\"quick_setup\")\n    .build();\n\nstate = client.getLoadState(getLoadStateReq);\n\nSystem.out.println(state);\n\n// Output:\n// false\n","\nawait client.releasePartitions({\n    collection_name: \"quick_setup\",\n    partition_names: [\"_default\", \"partitionA\", \"partitionB\"]\n})\n\nres = await client.getLoadState({\n    collection_name: \"quick_setup\"\n})\n\nconsole.log(res)\n\n// Output\n// \n// {\n//   status: {\n//     error_code: 'Success',\n//     reason: '',\n//     code: 0,\n//     retriable: false,\n//     detail: ''\n//   },\n//   state: 'LoadStateNotLoad'\n// }\n// \n"],"headingContent":"Manage Partitions","anchorList":[{"label":"管理分區","href":"Manage-Partitions","type":1,"isActive":false},{"label":"概述","href":"Overview","type":2,"isActive":false},{"label":"準備工作","href":"Preparations","type":2,"isActive":false},{"label":"列出分區","href":"List-Partitions","type":2,"isActive":false},{"label":"建立磁碟分割","href":"Create-Partitions","type":2,"isActive":false},{"label":"檢查特定磁碟分割","href":"Check-for-a-Specific-Partition","type":2,"isActive":false},{"label":"載入與釋放分割區","href":"Load--Release-Partitions","type":2,"isActive":false},{"label":"丟棄分割區","href":"Drop-Partitions","type":2,"isActive":false},{"label":"常見問題","href":"FAQ","type":2,"isActive":false}]}
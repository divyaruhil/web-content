{"codeList":["from pymilvus import MilvusClient\n\n# 1. Set up a Milvus client\nclient = MilvusClient(\n    uri=\"http://localhost:19530\"\n)\n\n# 2. Create a collection\nclient.create_collection(\n    collection_name=\"quick_setup\",\n    dimension=5,\n)\n","import com.google.gson.Gson;\nimport com.google.gson.JsonObject;\nimport io.milvus.orm.iterator.QueryIterator;\nimport io.milvus.orm.iterator.SearchIterator;\nimport io.milvus.response.QueryResultsWrapper;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.common.ConsistencyLevel;\nimport io.milvus.v2.common.IndexParam;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;\nimport io.milvus.v2.service.collection.request.DropCollectionReq;\nimport io.milvus.v2.service.vector.request.*;\nimport io.milvus.v2.service.vector.request.data.FloatVec;\nimport io.milvus.v2.service.vector.response.InsertResp;\nimport io.milvus.v2.service.vector.response.QueryResp;\n\nimport java.util.*;\n\nString CLUSTER_ENDPOINT = \"http://localhost:19530\";\n\n// 1. Connect to Milvus server\nConnectParam connectParam = ConnectParam.newBuilder()\n        .withUri(CLUSTER_ENDPOINT)\n        .build();\n\nMilvusServiceClient client  = new MilvusServiceClient(connectParam);\n\n// 2. Create a collection\nCreateCollectionReq quickSetupReq = CreateCollectionReq.builder()\n        .collectionName(\"quick_setup\")\n        .dimension(5)\n        .build();\nclient.createCollection(quickSetupReq);\n","# 3. Insert randomly generated vectors \ncolors = [\"green\", \"blue\", \"yellow\", \"red\", \"black\", \"white\", \"purple\", \"pink\", \"orange\", \"brown\", \"grey\"]\ndata = []\n\nfor i in range(10000):\n    current_color = random.choice(colors)\n    current_tag = random.randint(1000, 9999)\n    data.append({\n        \"id\": i,\n        \"vector\": [ random.uniform(-1, 1) for _ in range(5) ],\n        \"color\": current_color,\n        \"tag\": current_tag,\n        \"color_tag\": f\"{current_color}_{str(current_tag)}\"\n    })\n\nprint(data[0])\n\n# Output\n#\n# {\n#     \"id\": 0,\n#     \"vector\": [\n#         -0.5705990742218152,\n#         0.39844925120642083,\n#         -0.8791287928610869,\n#         0.024163154953680932,\n#         0.6837669917169638\n#     ],\n#     \"color\": \"purple\",\n#     \"tag\": 7774,\n#     \"color_tag\": \"purple_7774\"\n# }\n\nres = client.insert(\n    collection_name=\"quick_setup\",\n    data=data,\n)\n\nprint(res)\n\n# Output\n#\n# {\n#     \"insert_count\": 10000,\n#     \"ids\": [\n#         0,\n#         1,\n#         2,\n#         3,\n#         4,\n#         5,\n#         6,\n#         7,\n#         8,\n#         9,\n#         \"(9990 more items hidden)\"\n#     ]\n# }\n","// 3. Insert randomly generated vectors into the collection\nList<String> colors = Arrays.asList(\"green\", \"blue\", \"yellow\", \"red\", \"black\", \"white\", \"purple\", \"pink\", \"orange\", \"brown\", \"grey\");\nList<JsonObject> data = new ArrayList<>();\nGson gson = new Gson();\nfor (int i=0; i<10000; i++) {\n    Random rand = new Random();\n    String current_color = colors.get(rand.nextInt(colors.size()-1));\n    JsonObject row = new JsonObject();\n    row.addProperty(\"id\", (long) i);\n    row.add(\"vector\", gson.toJsonTree(Arrays.asList(rand.nextFloat(), rand.nextFloat(), rand.nextFloat(), rand.nextFloat(), rand.nextFloat())));\n    row.addProperty(\"color_tag\", current_color + \"_\" + (rand.nextInt(8999) + 1000));\n    data.add(row);\n}\n\nInsertResp insertR = client.insert(InsertReq.builder()\n        .collectionName(\"quick_setup\")\n        .data(data)\n        .build());\nSystem.out.println(insertR.getInsertCnt());\n\n// Output\n// 10000\n","from pymilvus import Collection,connections\n\n# 4. Search with iterator\nconnections.connect(host=\"127.0.0.1\", port=19530)\ncollection = Collection(\"quick_setup\")\n\nquery_vectors = [[0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]]\nsearch_params = {\n    \"metric_type\": \"IP\",\n    \"params\": {\"nprobe\": 10}\n}\n\niterator = collection.search_iterator(\n    data=query_vectors,\n    anns_field=\"vector\",\n    batch_size=10,\n    param=search_params,\n    output_fields=[\"color_tag\"],\n    limit=300\n)\n# search 300 entities totally with 10 entities per page\n\nresults = []\n\nwhile True:\n    result = iterator.next()\n    if not result:\n        iterator.close()\n        break\n        \n    results.extend(result)\n    \n    for hit in result:\n        results.append(hit.to_dict())\n\nprint(results)\n\n# Output\n#\n# [\n#     {\n#         \"id\": 1756,\n#         \"distance\": 2.0642056465148926,\n#         \"entity\": {\n#             \"color_tag\": \"black_9109\"\n#         }\n#     },\n#     {\n#         \"id\": 6488,\n#         \"distance\": 1.9437453746795654,\n#         \"entity\": {\n#             \"color_tag\": \"purple_8164\"\n#         }\n#     },\n#     {\n#         \"id\": 3338,\n#         \"distance\": 1.9107104539871216,\n#         \"entity\": {\n#             \"color_tag\": \"brown_8121\"\n#         }\n#     }\n# ]\n","// 4. Search with iterators\nSearchIteratorReq iteratorReq = SearchIteratorReq.builder()\n        .collectionName(\"quick_setup\")\n        .vectorFieldName(\"vector\")\n        .batchSize(10L)\n        .vectors(Collections.singletonList(new FloatVec(Arrays.asList(0.3580376395471989f, -0.6023495712049978f, 0.18414012509913835f, -0.26286205330961354f, 0.9029438446296592f))))\n        .params(\"{\\\"level\\\": 1}\")\n        .metricType(IndexParam.MetricType.COSINE)\n        .outputFields(Collections.singletonList(\"color_tag\"))\n        .topK(300)\n        .build();\n\nSearchIterator searchIterator = client.searchIterator(iteratorReq);\n\nList<QueryResultsWrapper.RowRecord> results = new ArrayList<>();\nwhile (true) {\n    List<QueryResultsWrapper.RowRecord> batchResults = searchIterator.next();\n    if (batchResults.isEmpty()) {\n        searchIterator.close();\n        break;\n    }\n\n    results.addAll(batchResults);\n}\nSystem.out.println(results.size());\n\n// Output\n// 300\n","# 6. Query with iterator\niterator = collection.query_iterator(\n    batch_size=10, # Controls the size of the return each time you call next()\n    expr=\"color_tag like \\\"brown_8\\\"\",\n    output_fields=[\"color_tag\"]\n)\n\nresults = []\n\nwhile True:\n    result = iterator.next()\n    if not result:\n        iterator.close()\n        break\n        \n    results.extend(result)\n    \n# 8. Check the search results\nprint(len(results))\n\nprint(results[:3])\n\n# Output\n#\n# [\n#     {\n#         \"color_tag\": \"brown_8785\",\n#         \"id\": 94\n#     },\n#     {\n#         \"color_tag\": \"brown_8568\",\n#         \"id\": 176\n#     },\n#     {\n#         \"color_tag\": \"brown_8721\",\n#         \"id\": 289\n#     }\n# ]\n","// 5. Query with iterators\nQueryIterator queryIterator = client.queryIterator(QueryIteratorReq.builder()\n        .collectionName(\"quick_setup\")\n        .expr(\"color_tag like \\\"brown_8%\\\"\")\n        .batchSize(50L)\n        .outputFields(Arrays.asList(\"vector\", \"color_tag\"))\n        .build());\n\nresults.clear();\nwhile (true) {\n    List<QueryResultsWrapper.RowRecord> batchResults = queryIterator.next();\n    if (batchResults.isEmpty()) {\n        queryIterator.close();\n        break;\n    }\n\n    results.addAll(batchResults);\n}\n\nSystem.out.println(results.subList(0, 3));\n\n// Output\n// [\n//  [color_tag:brown_8975, vector:[0.93425006, 0.42161798, 0.1603949, 0.86406225, 0.30063087], id:104],\n//  [color_tag:brown_8292, vector:[0.075261295, 0.51725155, 0.13842249, 0.13178307, 0.90713704], id:793],\n//  [color_tag:brown_8763, vector:[0.80366623, 0.6534371, 0.6446101, 0.094082, 0.1318503], id:1157]\n// ]\n\n"],"headingContent":"With Iterators","anchorList":[{"label":"使用迭代器","href":"With-Iterators","type":1,"isActive":false},{"label":"概述","href":"Overview","type":2,"isActive":false},{"label":"準備","href":"Preparations","type":2,"isActive":false},{"label":"使用迭代器搜尋","href":"Search-with-iterator","type":2,"isActive":false},{"label":"使用迭代器查詢","href":"Query-with-an-iterator","type":2,"isActive":false}]}
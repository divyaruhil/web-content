{"codeList":["import random, time\nfrom pymilvus import connections, MilvusClient, DataType\n\nSERVER_ADDR = \"http://localhost:19530\"\n\n# 1. Set up a Milvus client\nclient = MilvusClient(\n    uri=SERVER_ADDR\n)\n\n# 2. Create a collection\nschema = MilvusClient.create_schema(\n    auto_id=False,\n    enable_dynamic_field=True,\n    partition_key_field=\"color\",\n    num_partitions=64 # Number of partitions. Defaults to 64.\n)\n\nschema.add_field(field_name=\"id\", datatype=DataType.INT64, is_primary=True)\nschema.add_field(field_name=\"vector\", datatype=DataType.FLOAT_VECTOR, dim=5)\nschema.add_field(field_name=\"color\", datatype=DataType.VARCHAR, max_length=512)\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.common.DataType;\nimport io.milvus.v2.common.IndexParam;\nimport io.milvus.v2.service.collection.request.AddFieldReq;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;\n\nString CLUSTER_ENDPOINT = \"http://localhost:19530\";\n\n// 1. Connect to Milvus server\nConnectConfig connectConfig = ConnectConfig.builder()\n    .uri(CLUSTER_ENDPOINT)\n    .build();\n\nMilvusClientV2 client = new MilvusClientV2(connectConfig);\n\n// 2. Create a collection in customized setup mode\n\n// 2.1 Create schema\nCreateCollectionReq.CollectionSchema schema = client.createSchema();\nschema.setEnableDynamicField(true);\n\n// 2.2 Add fields to schema\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"id\")\n        .dataType(DataType.Int64)\n        .isPrimaryKey(true)\n        .autoID(false)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"vector\")\n        .dataType(DataType.FloatVector)\n        .dimension(5)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"color\")\n        .dataType(DataType.VarChar)\n        .maxLength(512)\n        .isPartitionKey(true)\n        .build());\n","const { MilvusClient, DataType, sleep } = require(\"@zilliz/milvus2-sdk-node\")\n\nconst address = \"http://localhost:19530\"\n\nasync function main() {\n// 1. Set up a Milvus Client\nclient = new MilvusClient({address}); \n\n// 2. Create a collection\n// 2.1 Define fields\nconst fields = [\n    {\n        name: \"id\",\n        data_type: DataType.Int64,\n        is_primary_key: true,\n        auto_id: false\n    },\n    {\n        name: \"vector\",\n        data_type: DataType.FloatVector,\n        dim: 5\n    },\n    {\n        name: \"color\",\n        data_type: DataType.VarChar,\n        max_length: 512,\n        is_partition_key: true\n    }\n]\n","index_params = MilvusClient.prepare_index_params()\n\nindex_params.add_index(\n    field_name=\"id\",\n    index_type=\"STL_SORT\"\n)\n\nindex_params.add_index(\n    field_name=\"color\",\n    index_type=\"Trie\"\n)\n\nindex_params.add_index(\n    field_name=\"vector\",\n    index_type=\"IVF_FLAT\",\n    metric_type=\"L2\",\n    params={\"nlist\": 1024}\n)\n","// 2.3 Prepare index parameters\nMap<String, Object> params = new HashMap<>();\nparams.put(\"nlist\", 1024);\nIndexParam indexParamForVectorField = IndexParam.builder()\n        .fieldName(\"vector\")\n        .indexType(IndexParam.IndexType.IVF_FLAT)\n        .metricType(IndexParam.MetricType.IP)\n        .extraParams(params)\n        .build();\n\nList<IndexParam> indexParams = new ArrayList<>();\nindexParams.add(indexParamForVectorField);\n","// 2.2 Prepare index parameters\nconst index_params = [{\n    field_name: \"color\",\n    index_type: \"Trie\"\n},{\n    field_name: \"id\",\n    index_type: \"STL_SORT\"\n},{\n    field_name: \"vector\",\n    index_type: \"IVF_FLAT\",\n    metric_type: \"IP\",\n    params: { nlist: 1024}\n}]\n","client.create_collection(\n    collection_name=\"test_collection\",\n    schema=schema,\n    index_params=index_params\n)\n","// 2.4 Create a collection with schema and index parameters\nCreateCollectionReq customizedSetupReq = CreateCollectionReq.builder()\n        .collectionName(\"test_collection\")\n        .collectionSchema(schema)\n        .indexParams(indexParams)\n        .build();\n\nclient.createCollection(customizedSetupReq);\n","// 2.3 Create a collection with fields and index parameters\nres = await client.createCollection({\n    collection_name: \"test_collection\",\n    fields: fields, \n    index_params: index_params,\n})\n\nconsole.log(res.error_code)\n\n// Output\n// \n// Success\n//\n","# 3. Insert randomly generated vectors \ncolors = [\"green\", \"blue\", \"yellow\", \"red\", \"black\", \"white\", \"purple\", \"pink\", \"orange\", \"brown\", \"grey\"]\ndata = []\n\nfor i in range(1000):\n    current_color = random.choice(colors)\n    current_tag = random.randint(1000, 9999)\n    data.append({\n        \"id\": i,\n        \"vector\": [ random.uniform(-1, 1) for _ in range(5) ],\n        \"color\": current_color,\n        \"tag\": current_tag,\n        \"color_tag\": f\"{current_color}_{str(current_tag)}\"\n    })\n\nprint(data[0])\n","// 3. Insert randomly generated vectors\nList<String> colors = Arrays.asList(\"green\", \"blue\", \"yellow\", \"red\", \"black\", \"white\", \"purple\", \"pink\", \"orange\", \"brown\", \"grey\");\nList<JsonObject> data = new ArrayList<>();\n\nGson gson = new Gson();\nRandom rand = new Random();\nfor (int i=0; i<1000; i++) {\n    String current_color = colors.get(rand.nextInt(colors.size()-1));\n    int current_tag = rand.nextInt(8999) + 1000;\n    JsonObject row = new JsonObject();\n    row.addProperty(\"id\", (long) i);\n    row.add(\"vector\", gson.toJsonTree(Arrays.asList(rand.nextFloat(), rand.nextFloat(), rand.nextFloat(), rand.nextFloat(), rand.nextFloat())));\n    row.addProperty(\"color\", current_color);\n    row.addProperty(\"tag\", current_tag);\n    row.addProperty(\"color_tag\", current_color + \"_\" + (rand.nextInt(8999) + 1000));\n    data.add(row);\n}\n\nSystem.out.println(data.get(0));\n","// 3. Insert randomly generated vectors \nconst colors = [\"green\", \"blue\", \"yellow\", \"red\", \"black\", \"white\", \"purple\", \"pink\", \"orange\", \"brown\", \"grey\"]\nvar data = []\n\nfor (let i = 0; i < 1000; i++) {\n    const current_color = colors[Math.floor(Math.random() * colors.length)]\n    const current_tag = Math.floor(Math.random() * 8999 + 1000)\n    data.push({\n        id: i,\n        vector: [Math.random(), Math.random(), Math.random(), Math.random(), Math.random()],\n        color: current_color,\n        tag: current_tag,\n        color_tag: `${current_color}_${current_tag}`\n    })\n}\n\nconsole.log(data[0])\n","{\n    id: 0,\n    vector: [\n        0.1275656405044483,\n        0.47417858592773277,\n        0.13858264437643286,\n        0.2390904907020377,\n        0.8447862593689635\n    ],\n    color: 'blue',\n    tag: 2064,\n    color_tag: 'blue_2064'\n}\n","res = client.insert(\n    collection_name=\"test_collection\",\n    data=data\n)\n\nprint(res)\n\n# Output\n#\n# {\n#     \"insert_count\": 1000,\n#     \"ids\": [\n#         0,\n#         1,\n#         2,\n#         3,\n#         4,\n#         5,\n#         6,\n#         7,\n#         8,\n#         9,\n#         \"(990 more items hidden)\"\n#     ]\n# }\n","// 3.1 Insert data into the collection\nInsertReq insertReq = InsertReq.builder()\n        .collectionName(\"test_collection\")\n        .data(data)\n        .build();\n\nInsertResp insertResp = client.insert(insertReq);\n\nSystem.out.println(insertResp.getInsertCnt());\n\n// Output:\n// 1000\n","res = await client.insert({\n    collection_name: \"test_collection\",\n    data: data,\n})\n\nconsole.log(res.insert_cnt)\n\n// Output\n// \n// 1000\n// \n","# 4. Search with partition key\nquery_vectors = [[0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]]\n\nres = client.search(\n    collection_name=\"test_collection\",\n    data=query_vectors,\n    filter=\"color == 'green'\",\n    search_params={\"metric_type\": \"L2\", \"params\": {\"nprobe\": 10}},\n    output_fields=[\"id\", \"color_tag\"],\n    limit=3\n)\n\nprint(res)\n\n# Output\n#\n# [\n#     [\n#         {\n#             \"id\": 970,\n#             \"distance\": 0.5770174264907837,\n#             \"entity\": {\n#                 \"id\": 970,\n#                 \"color_tag\": \"green_9828\"\n#             }\n#         },\n#         {\n#             \"id\": 115,\n#             \"distance\": 0.6898155808448792,\n#             \"entity\": {\n#                 \"id\": 115,\n#                 \"color_tag\": \"green_4073\"\n#             }\n#         },\n#         {\n#             \"id\": 899,\n#             \"distance\": 0.7028976678848267,\n#             \"entity\": {\n#                 \"id\": 899,\n#                 \"color_tag\": \"green_9897\"\n#             }\n#         }\n#     ]\n# ]\n","// 4. Search with partition key\nList<BaseVector> query_vectors = Collections.singletonList(new FloatVec(new float[]{0.3580376395471989f, -0.6023495712049978f, 0.18414012509913835f, -0.26286205330961354f, 0.9029438446296592f}));\n\nSearchReq searchReq = SearchReq.builder()\n        .collectionName(\"test_collection\")\n        .data(query_vectors)\n        .filter(\"color == \\\"green\\\"\")\n        .topK(3)\n        .outputFields(Collections.singletonList(\"color_tag\"))\n        .build();\n\nSearchResp searchResp = client.search(searchReq);\n\nList<List<SearchResp.SearchResult>> searchResults = searchResp.getSearchResults();\nfor (List<SearchResp.SearchResult> results : searchResults) {\n    System.out.println(\"TopK results:\");\n    for (SearchResp.SearchResult result : results) {\n        System.out.println(result);\n    }\n}\n\n// Output:\n// SearchResp.SearchResult(entity={color_tag=green_4945}, score=1.192079, id=542)\n// SearchResp.SearchResult(entity={color_tag=green_4633}, score=0.9138917, id=144)\n// SearchResp.SearchResult(entity={color_tag=green_8038}, score=0.8381896, id=962)\n","// 4. Search with partition key\nconst query_vectors = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]\n\nres = await client.search({\n    collection_name: \"test_collection\",\n    data: query_vectors,\n    filter: \"color == 'green'\",\n    output_fields: [\"color_tag\"],\n    limit: 3\n})\n\nconsole.log(res.results)\n\n// Output\n// \n// [\n//   { score: 2.402090549468994, id: '135', color_tag: 'green_2694' },\n//   { score: 2.3938629627227783, id: '326', color_tag: 'green_7104' },\n//   { score: 2.3235254287719727, id: '801', color_tag: 'green_3162' }\n// ]\n// \n"],"headingContent":"Use Partition Key","anchorList":[{"label":"使用分割區金鑰","href":"Use-Partition-Key","type":1,"isActive":false},{"label":"概述","href":"Overview","type":2,"isActive":false},{"label":"啟用分割區金鑰","href":"Enable-partition-key","type":2,"isActive":false},{"label":"列出分區","href":"List-partitions","type":2,"isActive":false},{"label":"插入資料","href":"Insert-data","type":2,"isActive":false},{"label":"使用分割鍵","href":"Use-partition-key","type":2,"isActive":false},{"label":"典型用例","href":"Typical-use-cases","type":2,"isActive":false}]}
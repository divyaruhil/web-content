{"codeList":["from pymilvus import MilvusClient\nimport random\n\n# 1. Set up a Milvus client\nclient = MilvusClient(\n    uri=\"http://localhost:19530\"\n)\n\n# 2. Create a collection\nclient.create_collection(\n    collection_name=\"quick_setup\",\n    dimension=5,\n    metric_type=\"IP\"\n)\n\n# 3. Insert randomly generated vectors \ncolors = [\"green\", \"blue\", \"yellow\", \"red\", \"black\", \"white\", \"purple\", \"pink\", \"orange\", \"brown\", \"grey\"]\ndata = []\n\nfor i in range(1000):\n    current_color = random.choice(colors)\n    data.append({\n        \"id\": i,\n        \"vector\": [ random.uniform(-1, 1) for _ in range(5) ],\n        \"color\": current_color,\n        \"color_tag\": f\"{current_color}_{str(random.randint(1000, 9999))}\"\n    })\n\nres = client.insert(\n    collection_name=\"quick_setup\",\n    data=data\n)\n\nprint(res)\n\n# Output\n#\n# {\n#     \"insert_count\": 1000,\n#     \"ids\": [\n#         0,\n#         1,\n#         2,\n#         3,\n#         4,\n#         5,\n#         6,\n#         7,\n#         8,\n#         9,\n#         \"(990 more items hidden)\"\n#     ]\n# }\n\n# 6.1 Create partitions \nclient.create_partition(\n    collection_name=\"quick_setup\",\n    partition_name=\"red\"\n)\n\nclient.create_partition(\n    collection_name=\"quick_setup\",\n    partition_name=\"blue\"\n)\n\n# 6.1 Insert data into partitions\nred_data = [ {\"id\": i, \"vector\": [ random.uniform(-1, 1) for _ in range(5) ], \"color\": \"red\", \"color_tag\": f\"red_{str(random.randint(1000, 9999))}\" } for i in range(500) ]\nblue_data = [ {\"id\": i, \"vector\": [ random.uniform(-1, 1) for _ in range(5) ], \"color\": \"blue\", \"color_tag\": f\"blue_{str(random.randint(1000, 9999))}\" } for i in range(500) ]\n\nres = client.insert(\n    collection_name=\"quick_setup\",\n    data=red_data,\n    partition_name=\"red\"\n)\n\nprint(res)\n\n# Output\n#\n# {\n#     \"insert_count\": 500,\n#     \"ids\": [\n#         0,\n#         1,\n#         2,\n#         3,\n#         4,\n#         5,\n#         6,\n#         7,\n#         8,\n#         9,\n#         \"(490 more items hidden)\"\n#     ]\n# }\n\nres = client.insert(\n    collection_name=\"quick_setup\",\n    data=blue_data,\n    partition_name=\"blue\"\n)\n\nprint(res)\n\n# Output\n#\n# {\n#     \"insert_count\": 500,\n#     \"ids\": [\n#         0,\n#         1,\n#         2,\n#         3,\n#         4,\n#         5,\n#         6,\n#         7,\n#         8,\n#         9,\n#         \"(490 more items hidden)\"\n#     ]\n# }\n","import com.google.gson.Gson;\nimport com.google.gson.JsonObject;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;\nimport io.milvus.v2.service.collection.request.GetLoadStateReq;\nimport io.milvus.v2.service.partition.request.CreatePartitionReq;\nimport io.milvus.v2.service.vector.request.InsertReq;\nimport io.milvus.v2.service.vector.response.InsertResp;\n\nimport java.util.*;\n\nString CLUSTER_ENDPOINT = \"http://localhost:19530\";\n\n// 1. Connect to Milvus server\nConnectConfig connectConfig = ConnectConfig.builder()\n    .uri(CLUSTER_ENDPOINT)\n    .build();\n\nMilvusClientV2 client = new MilvusClientV2(connectConfig);  \n\n// 2. Create a collection in quick setup mode\nCreateCollectionReq quickSetupReq = CreateCollectionReq.builder()\n        .collectionName(\"quick_setup\")\n        .dimension(5)\n        .metricType(\"IP\")\n        .build();\n\nclient.createCollection(quickSetupReq);\n\nGetLoadStateReq loadStateReq = GetLoadStateReq.builder()\n        .collectionName(\"quick_setup\")\n        .build();\n\nboolean state = client.getLoadState(loadStateReq);\n\nSystem.out.println(state);\n\n// Output:\n// true\n\n// 3. Insert randomly generated vectors into the collection\nList<String> colors = Arrays.asList(\"green\", \"blue\", \"yellow\", \"red\", \"black\", \"white\", \"purple\", \"pink\", \"orange\", \"brown\", \"grey\");\nList<JsonObject> data = new ArrayList<>();\nGson gson = new Gson();\nfor (int i=0; i<1000; i++) {\n    Random rand = new Random();\n    String current_color = colors.get(rand.nextInt(colors.size()-1));\n    JsonObject row = new JsonObject();\n    row.addProperty(\"id\", (long) i);\n    row.add(\"vector\", gson.toJsonTree(Arrays.asList(rand.nextFloat(), rand.nextFloat(), rand.nextFloat(), rand.nextFloat(), rand.nextFloat())));\n    row.addProperty(\"color_tag\", current_color + \"_\" + String.valueOf(rand.nextInt(8999) + 1000));\n    data.add(row);\n}\n\nInsertReq insertReq = InsertReq.builder()\n        .collectionName(\"quick_setup\")\n        .data(data)\n        .build();\n\nInsertResp insertResp = client.insert(insertReq);\n\nSystem.out.println(insertResp.getInsertCnt());\n\n// Output:\n// 1000\n\n// 6.1. Create a partition\nCreatePartitionReq partitionReq = CreatePartitionReq.builder()\n        .collectionName(\"quick_setup\")\n        .partitionName(\"red\")\n        .build();\n\nclient.createPartition(partitionReq);\n\npartitionReq = CreatePartitionReq.builder()\n        .collectionName(\"quick_setup\")\n        .partitionName(\"blue\")\n        .build();\n\nclient.createPartition(partitionReq);\n\n// 6.2 Insert data into the partition\ndata = new ArrayList<>();\n\nfor (int i=1000; i<1500; i++) {\n    Random rand = new Random();\n    String current_color = \"red\";\n    JsonObject row = new JsonObject();\n    row.addProperty(\"id\", (long) i);\n    row.add(\"vector\", gson.toJsonTree(Arrays.asList(rand.nextFloat(), rand.nextFloat(), rand.nextFloat(), rand.nextFloat(), rand.nextFloat())));\n    row.addProperty(\"color\", current_color);\n    row.addProperty(\"color_tag\", current_color + \"_\" + String.valueOf(rand.nextInt(8999) + 1000));\n    data.add(row);\n}\n\ninsertReq = InsertReq.builder()\n        .collectionName(\"quick_setup\")\n        .data(data)\n        .partitionName(\"red\")\n        .build();\n\ninsertResp = client.insert(insertReq);\n\nSystem.out.println(insertResp.getInsertCnt());\n\n// Output:\n// 500\n\ndata = new ArrayList<>();\n\nfor (int i=1500; i<2000; i++) {\n    Random rand = new Random();\n    String current_color = \"blue\";\n    JsonObject row = new JsonObject();\n    row.addProperty(\"id\", (long) i);\n    row.add(\"vector\", gson.toJsonTree(Arrays.asList(rand.nextFloat(), rand.nextFloat(), rand.nextFloat(), rand.nextFloat(), rand.nextFloat())));\n    row.addProperty(\"color\", current_color);\n    row.addProperty(\"color_tag\", current_color + \"_\" + String.valueOf(rand.nextInt(8999) + 1000));\n    data.add(row);\n}\n\ninsertReq = InsertReq.builder()\n        .collectionName(\"quick_setup\")\n        .data(data)\n        .partitionName(\"blue\")\n        .build();\n\ninsertResp = client.insert(insertReq);\n\nSystem.out.println(insertResp.getInsertCnt());\n\n// Output:\n// 500\n","const { MilvusClient, DataType, sleep } = require(\"@zilliz/milvus2-sdk-node\")\n\nconst address = \"http://localhost:19530\"\n\n// 1. Set up a Milvus Client\nclient = new MilvusClient({address});\n\n// 2. Create a collection in quick setup mode\nawait client.createCollection({\n    collection_name: \"quick_setup\",\n    dimension: 5,\n    metric_type: \"IP\"\n});  \n\n// 3. Insert randomly generated vectors\nconst colors = [\"green\", \"blue\", \"yellow\", \"red\", \"black\", \"white\", \"purple\", \"pink\", \"orange\", \"brown\", \"grey\"]\ndata = []\n\nfor (let i = 0; i < 1000; i++) {\n    current_color = colors[Math.floor(Math.random() * colors.length)]\n    data.push({\n        id: i,\n        vector: [Math.random(), Math.random(), Math.random(), Math.random(), Math.random()],\n        color: current_color,\n        color_tag: `${current_color}_${Math.floor(Math.random() * 8999) + 1000}`\n    })\n}\n\nvar res = await client.insert({\n    collection_name: \"quick_setup\",\n    data: data\n})\n\nconsole.log(res.insert_cnt)\n\n// Output\n// \n// 1000\n// \n\nawait client.createPartition({\n    collection_name: \"quick_setup\",\n    partition_name: \"red\"\n})\n\nawait client.createPartition({\n    collection_name: \"quick_setup\",\n    partition_name: \"blue\"\n})\n\n// 6.1 Insert data into partitions\nvar red_data = []\nvar blue_data = []\n\nfor (let i = 1000; i < 1500; i++) {\n    red_data.push({\n        id: i,\n        vector: [Math.random(), Math.random(), Math.random(), Math.random(), Math.random()],\n        color: \"red\",\n        color_tag: `red_${Math.floor(Math.random() * 8999) + 1000}`\n    })\n}\n\nfor (let i = 1500; i < 2000; i++) {\n    blue_data.push({\n        id: i,\n        vector: [Math.random(), Math.random(), Math.random(), Math.random(), Math.random()],\n        color: \"blue\",\n        color_tag: `blue_${Math.floor(Math.random() * 8999) + 1000}`\n    })\n}\n\nres = await client.insert({\n    collection_name: \"quick_setup\",\n    data: red_data,\n    partition_name: \"red\"\n})\n\nconsole.log(res.insert_cnt)\n\n// Output\n// \n// 500\n// \n\nres = await client.insert({\n    collection_name: \"quick_setup\",\n    data: blue_data,\n    partition_name: \"blue\"\n})\n\nconsole.log(res.insert_cnt)\n\n// Output\n// \n// 500\n// \n","# Single vector search\nres = client.search(\n    collection_name=\"quick_setup\", # Replace with the actual name of your collection\n    # Replace with your query vector\n    data=[[0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]],\n    limit=5, # Max. number of search results to return\n    search_params={\"metric_type\": \"IP\", \"params\": {}} # Search parameters\n)\n\n# Convert the output to a formatted JSON string\nresult = json.dumps(res, indent=4)\nprint(result)\n","// 4. Single vector search\nList<List<Float>> query_vectors = Arrays.asList(Arrays.asList(0.3580376395471989f, -0.6023495712049978f, 0.18414012509913835f, -0.26286205330961354f, 0.9029438446296592f));\n\nSearchReq searchReq = SearchReq.builder()\n    .collectionName(\"quick_setup\")\n    .data(query_vectors)\n    .topK(3) // The number of results to return\n    .build();\n\nSearchResp searchResp = client.search(searchReq);\n\nSystem.out.println(JSONObject.toJSON(searchResp));\n","// 4. Single vector search\nvar query_vector = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592],\n\nres = await client.search({\n    collection_name: \"quick_setup\",\n    data: [query_vector],\n    limit: 3, // The number of results to return\n})\n\nconsole.log(res.results)\n","[\n    [\n        {\n            \"id\": 0,\n            \"distance\": 1.4093276262283325,\n            \"entity\": {}\n        },\n        {\n            \"id\": 4,\n            \"distance\": 0.9902134537696838,\n            \"entity\": {}\n        },\n        {\n            \"id\": 1,\n            \"distance\": 0.8519943356513977,\n            \"entity\": {}\n        },\n        {\n            \"id\": 5,\n            \"distance\": 0.7972343564033508,\n            \"entity\": {}\n        },\n        {\n            \"id\": 2,\n            \"distance\": 0.5928734540939331,\n            \"entity\": {}\n        }\n    ]\n]\n","{\"searchResults\": [[\n    {\n        \"score\": 1.263043,\n        \"fields\": {\n            \"vector\": [\n                0.9533119,\n                0.02538395,\n                0.76714665,\n                0.35481733,\n                0.9845762\n            ],\n            \"id\": 740\n        }\n    },\n    {\n        \"score\": 1.2377806,\n        \"fields\": {\n            \"vector\": [\n                0.7411156,\n                0.08687937,\n                0.8254139,\n                0.08370924,\n                0.99095553\n            ],\n            \"id\": 640\n        }\n    },\n    {\n        \"score\": 1.1869997,\n        \"fields\": {\n            \"vector\": [\n                0.87928146,\n                0.05324632,\n                0.6312755,\n                0.28005534,\n                0.9542448\n            ],\n            \"id\": 455\n        }\n    }\n]]}\n","[\n  { score: 1.7463608980178833, id: '854' },\n  { score: 1.744946002960205, id: '425' },\n  { score: 1.7258622646331787, id: '718' }\n]\n","# Bulk-vector search\nres = client.search(\n    collection_name=\"quick_setup\", # Replace with the actual name of your collection\n    data=[\n        [0.19886812562848388, 0.06023560599112088, 0.6976963061752597, 0.2614474506242501, 0.838729485096104],\n        [0.3172005263489739, 0.9719044792798428, -0.36981146090600725, -0.4860894583077995, 0.95791889146345]\n    ], # Replace with your query vectors\n    limit=2, # Max. number of search results to return\n    search_params={\"metric_type\": \"IP\", \"params\": {}} # Search parameters\n)\n\nresult = json.dumps(res, indent=4)\nprint(result)\n","// 5. Batch vector search\nquery_vectors = Arrays.asList(\n    Arrays.asList(0.3580376395471989f, -0.6023495712049978f, 0.18414012509913835f, -0.26286205330961354f, 0.9029438446296592f),\n    Arrays.asList(0.19886812562848388f, 0.06023560599112088f, 0.6976963061752597f, 0.2614474506242501f, 0.838729485096104f)\n);\n\nsearchReq = SearchReq.builder()\n    .collectionName(\"quick_setup\")\n    .data(query_vectors)\n    .topK(2)\n    .build();\n\nsearchResp = client.search(searchReq);\n\nSystem.out.println(JSONObject.toJSON(searchResp));\n","// 5. Batch vector search\nvar query_vectors = [\n    [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592],\n    [0.19886812562848388, 0.06023560599112088, 0.6976963061752597, 0.2614474506242501, 0.838729485096104]\n]\n\nres = await client.search({\n    collection_name: \"quick_setup\",\n    data: query_vectors,\n    limit: 2,\n})\n\nconsole.log(res.results)\n","[\n    [\n        {\n            \"id\": 1,\n            \"distance\": 1.3017789125442505,\n            \"entity\": {}\n        },\n        {\n            \"id\": 7,\n            \"distance\": 1.2419954538345337,\n            \"entity\": {}\n        }\n    ], # Result set 1\n    [\n        {\n            \"id\": 3,\n            \"distance\": 2.3358664512634277,\n            \"entity\": {}\n        },\n        {\n            \"id\": 8,\n            \"distance\": 0.5642921924591064,\n            \"entity\": {}\n        }\n    ] # Result set 2\n]\n","// Two sets of vectors are returned as expected\n\n{\"searchResults\": [\n    [\n        {\n            \"score\": 1.263043,\n            \"fields\": {\n                \"vector\": [\n                    0.9533119,\n                    0.02538395,\n                    0.76714665,\n                    0.35481733,\n                    0.9845762\n                ],\n                \"id\": 740\n            }\n        },\n        {\n            \"score\": 1.2377806,\n            \"fields\": {\n                \"vector\": [\n                    0.7411156,\n                    0.08687937,\n                    0.8254139,\n                    0.08370924,\n                    0.99095553\n                ],\n                \"id\": 640\n            }\n        }\n    ],\n    [\n        {\n            \"score\": 1.8654699,\n            \"fields\": {\n                \"vector\": [\n                    0.4671427,\n                    0.8378432,\n                    0.98844475,\n                    0.82763994,\n                    0.9729997\n                ],\n                \"id\": 638\n            }\n        },\n        {\n            \"score\": 1.8581753,\n            \"fields\": {\n                \"vector\": [\n                    0.735541,\n                    0.60140246,\n                    0.86730254,\n                    0.93152493,\n                    0.98603314\n                ],\n                \"id\": 855\n            }\n        }\n    ]\n]}\n","[\n  [\n    { score: 2.3590476512908936, id: '854' },\n    { score: 2.2896690368652344, id: '59' }\n  [\n    { score: 2.664059638977051, id: '59' },\n    { score: 2.59483003616333, id: '854' }\n  ]\n]\n","# 6.2 Search within a partition\nquery_vector = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]\n\nres = client.search(\n    collection_name=\"quick_setup\",\n    data=[query_vector],\n    limit=5,\n    search_params={\"metric_type\": \"IP\", \"params\": {\"level\": 1}},\n    partition_names=[\"red\"]\n)\n\nprint(res)\n","// 6.3 Search within partitions\nquery_vectors = Arrays.asList(Arrays.asList(0.3580376395471989f, -0.6023495712049978f, 0.18414012509913835f, -0.26286205330961354f, 0.9029438446296592f));\n\nsearchReq = SearchReq.builder()\n    .collectionName(\"quick_setup\")\n    .data(query_vectors)\n    .partitionNames(Arrays.asList(\"red\"))\n    .topK(5)\n    .build();\n\nsearchResp = client.search(searchReq);\n\nSystem.out.println(JSONObject.toJSON(searchResp));\n","// 6.2 Search within partitions\nquery_vector = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]\n\nres = await client.search({\n    collection_name: \"quick_setup\",\n    data: [query_vector],\n    partition_names: [\"red\"],\n    limit: 5,\n})\n\nconsole.log(res.results)\n","[\n    [\n        {\n            \"id\": 16,\n            \"distance\": 0.9200337529182434,\n            \"entity\": {}\n        },\n        {\n            \"id\": 14,\n            \"distance\": 0.4505271911621094,\n            \"entity\": {}\n        },\n        {\n            \"id\": 15,\n            \"distance\": 0.19924677908420563,\n            \"entity\": {}\n        },\n        {\n            \"id\": 17,\n            \"distance\": 0.0075093843042850494,\n            \"entity\": {}\n        },\n        {\n            \"id\": 13,\n            \"distance\": -0.14609718322753906,\n            \"entity\": {}\n        }\n    ]\n]\n","{\"searchResults\": [\n    [\n        {\n            \"score\": 1.1677284,\n            \"fields\": {\n                \"vector\": [\n                    0.9986977,\n                    0.17964739,\n                    0.49086612,\n                    0.23155272,\n                    0.98438674\n                ],\n                \"id\": 1435\n            }\n        },\n        {\n            \"score\": 1.1476475,\n            \"fields\": {\n                \"vector\": [\n                    0.6952647,\n                    0.13417172,\n                    0.91045254,\n                    0.119336545,\n                    0.9338931\n                ],\n                \"id\": 1291\n            }\n        },\n        {\n            \"score\": 1.0969629,\n            \"fields\": {\n                \"vector\": [\n                    0.3363194,\n                    0.028906643,\n                    0.6675426,\n                    0.030419827,\n                    0.9735209\n                ],\n                \"id\": 1168\n            }\n        },\n        {\n            \"score\": 1.0741848,\n            \"fields\": {\n                \"vector\": [\n                    0.9980543,\n                    0.36063594,\n                    0.66427994,\n                    0.17359233,\n                    0.94954175\n                ],\n                \"id\": 1164\n            }\n        },\n        {\n            \"score\": 1.0584627,\n            \"fields\": {\n                \"vector\": [\n                    0.7187005,\n                    0.12674773,\n                    0.987718,\n                    0.3110777,\n                    0.86093885\n                ],\n                \"id\": 1085\n            }\n        }\n    ],\n    [\n        {\n            \"score\": 1.8030131,\n            \"fields\": {\n                \"vector\": [\n                    0.59726167,\n                    0.7054632,\n                    0.9573117,\n                    0.94529945,\n                    0.8664103\n                ],\n                \"id\": 1203\n            }\n        },\n        {\n            \"score\": 1.7728865,\n            \"fields\": {\n                \"vector\": [\n                    0.6672442,\n                    0.60448086,\n                    0.9325822,\n                    0.80272985,\n                    0.8861626\n                ],\n                \"id\": 1448\n            }\n        },\n        {\n            \"score\": 1.7536311,\n            \"fields\": {\n                \"vector\": [\n                    0.59663296,\n                    0.77831805,\n                    0.8578314,\n                    0.88818026,\n                    0.9030075\n                ],\n                \"id\": 1010\n            }\n        },\n        {\n            \"score\": 1.7520742,\n            \"fields\": {\n                \"vector\": [\n                    0.854198,\n                    0.72294194,\n                    0.9245805,\n                    0.86126596,\n                    0.7969224\n                ],\n                \"id\": 1219\n            }\n        },\n        {\n            \"score\": 1.7452049,\n            \"fields\": {\n                \"vector\": [\n                    0.96419,\n                    0.943535,\n                    0.87611496,\n                    0.8268136,\n                    0.79786557\n                ],\n                \"id\": 1149\n            }\n        }\n    ]\n]}\n","[\n  { score: 3.0258803367614746, id: '1201' },\n  { score: 3.004319190979004, id: '1458' },\n  { score: 2.880324363708496, id: '1187' },\n  { score: 2.8246407508850098, id: '1347' },\n  { score: 2.797295093536377, id: '1406' }\n]\n","res = client.search(\n    collection_name=\"quick_setup\",\n    data=[query_vector],\n    limit=5,\n    search_params={\"metric_type\": \"IP\", \"params\": {\"level\": 1}},\n    partition_names=[\"blue\"]\n)\n\nprint(res)\n","searchReq = SearchReq.builder()\n    .collectionName(\"quick_setup\")\n    .data(query_vectors)\n    .partitionNames(Arrays.asList(\"blue\"))\n    .topK(5)\n    .build();\n\nsearchResp = client.search(searchReq);\n\nSystem.out.println(JSONObject.toJSON(searchResp));\n","res = await client.search({\n    collection_name: \"quick_setup\",\n    data: [query_vector],\n    partition_names: [\"blue\"],\n    limit: 5,\n})\n\nconsole.log(res.results)\n","[\n    [\n        {\n            \"id\": 20,\n            \"distance\": 2.363696813583374,\n            \"entity\": {}\n        },\n        {\n            \"id\": 26,\n            \"distance\": 1.0665391683578491,\n            \"entity\": {}\n        },\n        {\n            \"id\": 23,\n            \"distance\": 1.066049575805664,\n            \"entity\": {}\n        },\n        {\n            \"id\": 29,\n            \"distance\": 0.8353596925735474,\n            \"entity\": {}\n        },\n        {\n            \"id\": 28,\n            \"distance\": 0.7484277486801147,\n            \"entity\": {}\n        }\n    ]\n]\n","{\"searchResults\": [\n    [\n        {\n            \"score\": 1.1628494,\n            \"fields\": {\n                \"vector\": [\n                    0.7442872,\n                    0.046407282,\n                    0.71031404,\n                    0.3544345,\n                    0.9819991\n                ],\n                \"id\": 1992\n            }\n        },\n        {\n            \"score\": 1.1470042,\n            \"fields\": {\n                \"vector\": [\n                    0.5505825,\n                    0.04367262,\n                    0.9985836,\n                    0.18922359,\n                    0.93255126\n                ],\n                \"id\": 1977\n            }\n        },\n        {\n            \"score\": 1.1450152,\n            \"fields\": {\n                \"vector\": [\n                    0.89994013,\n                    0.052991092,\n                    0.8645576,\n                    0.6406729,\n                    0.95679337\n                ],\n                \"id\": 1573\n            }\n        },\n        {\n            \"score\": 1.1439825,\n            \"fields\": {\n                \"vector\": [\n                    0.9253267,\n                    0.15890503,\n                    0.7999555,\n                    0.19126713,\n                    0.898583\n                ],\n                \"id\": 1552\n            }\n        },\n        {\n            \"score\": 1.1029172,\n            \"fields\": {\n                \"vector\": [\n                    0.95661926,\n                    0.18777144,\n                    0.38115507,\n                    0.14323527,\n                    0.93137646\n                ],\n                \"id\": 1823\n            }\n        }\n    ],\n    [\n        {\n            \"score\": 1.8005109,\n            \"fields\": {\n                \"vector\": [\n                    0.5953582,\n                    0.7794224,\n                    0.9388869,\n                    0.79825854,\n                    0.9197286\n                ],\n                \"id\": 1888\n            }\n        },\n        {\n            \"score\": 1.7714822,\n            \"fields\": {\n                \"vector\": [\n                    0.56805456,\n                    0.89422905,\n                    0.88187534,\n                    0.914824,\n                    0.8944365\n                ],\n                \"id\": 1648\n            }\n        },\n        {\n            \"score\": 1.7561421,\n            \"fields\": {\n                \"vector\": [\n                    0.83421993,\n                    0.39865613,\n                    0.92319834,\n                    0.42695504,\n                    0.96633124\n                ],\n                \"id\": 1688\n            }\n        },\n        {\n            \"score\": 1.7553532,\n            \"fields\": {\n                \"vector\": [\n                    0.89994013,\n                    0.052991092,\n                    0.8645576,\n                    0.6406729,\n                    0.95679337\n                ],\n                \"id\": 1573\n            }\n        },\n        {\n            \"score\": 1.7543385,\n            \"fields\": {\n                \"vector\": [\n                    0.16542226,\n                    0.38248396,\n                    0.9888778,\n                    0.80913955,\n                    0.9501492\n                ],\n                \"id\": 1544\n            }\n        }\n    ]\n]}\n","[\n  { score: 2.8421106338500977, id: '1745' },\n  { score: 2.838560104370117, id: '1782' },\n  { score: 2.8134000301361084, id: '1511' },\n  { score: 2.718268871307373, id: '1679' },\n  { score: 2.7014894485473633, id: '1597' }\n]\n","# Search with output fields\nres = client.search(\n    collection_name=\"quick_setup\", # Replace with the actual name of your collection\n    data=[[0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]],\n    limit=5, # Max. number of search results to return\n    search_params={\"metric_type\": \"IP\", \"params\": {}}, # Search parameters\n    output_fields=[\"color\"] # Output fields to return\n)\n\nresult = json.dumps(res, indent=4)\nprint(result)\n","// 7. Search with output fields\nquery_vectors = Arrays.asList(Arrays.asList(0.3580376395471989f, -0.6023495712049978f, 0.18414012509913835f, -0.26286205330961354f, 0.9029438446296592f));\n\nsearchReq = SearchReq.builder()\n    .collectionName(\"quick_setup\")\n    .data(query_vectors)\n    .outputFields(Arrays.asList(\"color\"))\n    .topK(5)\n    .build();\n\nsearchResp = client.search(searchReq);\n\nSystem.out.println(JSONObject.toJSON(searchResp));\n","// 7. Search with output fields\nquery_vector = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]\n\nres = await client.search({\n    collection_name: \"quick_setup\",\n    data: [query_vector],\n    limit: 5,\n    output_fields: [\"color\"],\n})\n\nconsole.log(res.results)\n","[\n    [\n        {\n            \"id\": 0,\n            \"distance\": 1.4093276262283325,\n            \"entity\": {\n                \"color\": \"pink_8682\"\n            }\n        },\n        {\n            \"id\": 16,\n            \"distance\": 1.0159327983856201,\n            \"entity\": {\n                \"color\": \"yellow_1496\"\n            }\n        },\n        {\n            \"id\": 4,\n            \"distance\": 0.9902134537696838,\n            \"entity\": {\n                \"color\": \"red_4794\"\n            }\n        },\n        {\n            \"id\": 14,\n            \"distance\": 0.9803846478462219,\n            \"entity\": {\n                \"color\": \"green_2899\"\n            }\n        },\n        {\n            \"id\": 1,\n            \"distance\": 0.8519943356513977,\n            \"entity\": {\n                \"color\": \"red_7025\"\n            }\n        }\n    ]\n]\n","{\"searchResults\": [\n    [\n        {\n            \"score\": 1.263043,\n            \"fields\": {}\n        },\n        {\n            \"score\": 1.2377806,\n            \"fields\": {}\n        },\n        {\n            \"score\": 1.1869997,\n            \"fields\": {}\n        },\n        {\n            \"score\": 1.1748955,\n            \"fields\": {}\n        },\n        {\n            \"score\": 1.1720343,\n            \"fields\": {}\n        }\n    ]\n]}\n","\n[\n  { score: 3.036271572113037, id: '59', color: 'orange' },\n  { score: 3.0267879962921143, id: '1745', color: 'blue' },\n  { score: 3.0069446563720703, id: '854', color: 'black' },\n  { score: 2.984386682510376, id: '718', color: 'black' },\n  { score: 2.916019916534424, id: '425', color: 'purple' }\n]\n","# Search with filter\nres = client.search(\n    collection_name=\"quick_setup\", # Replace with the actual name of your collection\n    data=[[0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]],\n    limit=5, # Max. number of search results to return\n    search_params={\"metric_type\": \"IP\", \"params\": {}}, # Search parameters\n    output_fields=[\"color\"], # Output fields to return\n    filter='color like \"red%\"'\n)\n\nresult = json.dumps(res, indent=4)\nprint(result)\n","// 8. Filtered search\nquery_vectors = Arrays.asList(Arrays.asList(0.3580376395471989f, -0.6023495712049978f, 0.18414012509913835f, -0.26286205330961354f, 0.9029438446296592f));\n\nsearchReq = SearchReq.builder()\n    .collectionName(\"quick_setup\")\n    .data(query_vectors)\n    .outputFields(Arrays.asList(\"color_tag\"))\n    .filter(\"color_tag like \\\"red%\\\"\")\n    .topK(5)\n    .build();\n\nsearchResp = client.search(searchReq);\n\nSystem.out.println(JSONObject.toJSON(searchResp));\n","// 8. Filtered search\n// 8.1 Filter with \"like\" operator and prefix wildcard\nquery_vector = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]\n\nres = await client.search({\n    collection_name: \"quick_setup\",\n    data: [query_vector],\n    limit: 5,\n    filters: \"color_tag like \\\"red%\\\"\",\n    output_fields: [\"color_tag\"]\n})\n\nconsole.log(res.results)\n","[\n    [\n        {\n            \"id\": 4,\n            \"distance\": 0.9902134537696838,\n            \"entity\": {\n                \"color\": \"red_4794\"\n            }\n        },\n        {\n            \"id\": 1,\n            \"distance\": 0.8519943356513977,\n            \"entity\": {\n                \"color\": \"red_7025\"\n            }\n        },\n        {\n            \"id\": 6,\n            \"distance\": -0.4113418459892273,\n            \"entity\": {\n                \"color\": \"red_9392\"\n            }\n        }\n    ]\n]\n","{\"searchResults\": [\n    [\n        {\n            \"score\": 1.1869997,\n            \"fields\": {\"color_tag\": \"red_3026\"}\n        },\n        {\n            \"score\": 1.1677284,\n            \"fields\": {\"color_tag\": \"red_9030\"}\n        },\n        {\n            \"score\": 1.1476475,\n            \"fields\": {\"color_tag\": \"red_3744\"}\n        },\n        {\n            \"score\": 1.0969629,\n            \"fields\": {\"color_tag\": \"red_4168\"}\n        },\n        {\n            \"score\": 1.0741848,\n            \"fields\": {\"color_tag\": \"red_9678\"}\n        }\n    ]\n]}\n","[\n  { score: 2.5080761909484863, id: '1201', color_tag: 'red_8904' },\n  { score: 2.491129159927368, id: '425', color_tag: 'purple_8212' },\n  { score: 2.4889798164367676, id: '1458', color_tag: 'red_6891' },\n  { score: 2.42964243888855, id: '724', color_tag: 'black_9885' },\n  { score: 2.4004223346710205, id: '854', color_tag: 'black_5990' }\n]\n","# Infix match on color field\nres = client.search(\n    collection_name=\"quick_setup\", # Replace with the actual name of your collection\n    data=[[0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]],\n    limit=5, # Max. number of search results to return\n    search_params={\"metric_type\": \"IP\", \"params\": {}}, # Search parameters\n    output_fields=[\"color\"], # Output fields to return\n    filter='color like \"%ll%\"' # Filter on color field, infix match on \"ll\"\n)\n\nresult = json.dumps(res, indent=4)\nprint(result)\n","// 8. Filtered search\nquery_vectors = Arrays.asList(Arrays.asList(0.3580376395471989f, -0.6023495712049978f, 0.18414012509913835f, -0.26286205330961354f, 0.9029438446296592f));\n\nsearchReq = SearchReq.builder()\n    .collectionName(\"quick_setup\")\n    .data(query_vectors)\n    .outputFields(Arrays.asList(\"color_tag\"))\n    .filter(\"color like \\\"%ll%\\\"\")\n    .topK(5)\n    .build();\n\nsearchResp = client.search(searchReq);\n\nSystem.out.println(JSONObject.toJSON(searchResp));\n","// 8. Filtered search\n// 8.1 Filter with \"like\" operator and prefix wildcard\nquery_vector = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]\n\nres = await client.search({\n    collection_name: \"quick_setup\",\n    data: [query_vector],\n    limit: 5,\n    filters: \"color_tag like \\\"%ll%\\\"\",\n    output_fields: [\"color_tag\"]\n})\n\nconsole.log(res.results)\n","[\n    [\n        {\n            \"id\": 5,\n            \"distance\": 0.7972343564033508,\n            \"entity\": {\n                \"color\": \"yellow_4222\"\n            }\n        }\n    ]\n]\n","{\"searchResults\": [\n    [\n        {\n            \"score\": 1.1869997,\n            \"fields\": {\"color_tag\": \"yellow_4222\"}\n        }\n    ]\n]}\n","[\n  { score: 2.5080761909484863, id: '1201', color_tag: 'yellow_4222' }\n]\n","# Conduct a range search\nsearch_params = {\n    \"metric_type\": \"IP\",\n    \"params\": {\n        \"radius\": 0.8, # Radius of the search circle\n        \"range_filter\": 1.0 # Range filter to filter out vectors that are not within the search circle\n    }\n}\n\nres = client.search(\n    collection_name=\"quick_setup\", # Replace with the actual name of your collection\n    data=[[0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]],\n    limit=3, # Max. number of search results to return\n    search_params=search_params, # Search parameters\n    output_fields=[\"color\"], # Output fields to return\n)\n\nresult = json.dumps(res, indent=4)\nprint(result)\n","// 9. Range search\nquery_vectors = Arrays.asList(Arrays.asList(0.3580376395471989f, -0.6023495712049978f, 0.18414012509913835f, -0.26286205330961354f, 0.9029438446296592f));\n\nsearchReq = SearchReq.builder()\n    .collectionName(\"quick_setup\")\n    .data(query_vectors)\n    .outputFields(Arrays.asList(\"color_tag\"))\n    .searchParams(Map.of(\"radius\", 0.1, \"range\", 1.0))\n    .topK(5)\n    .build();\n\nsearchResp = client.search(searchReq);\n\nSystem.out.println(JSONObject.toJSON(searchResp));\n","// 9. Range search\nquery_vector = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]\n\nres = await client.search({\n    collection_name: \"quick_setup\",\n    data: [query_vector],\n    limit: 5,\n    params: {\n        radius: 0.1,\n        range: 1.0\n    },\n    output_fields: [\"color_tag\"]\n})\n\nconsole.log(res.results)\n","[\n    [\n        {\n            \"id\": 4,\n            \"distance\": 0.9902134537696838,\n            \"entity\": {\n                \"color\": \"red_4794\"\n            }\n        },\n        {\n            \"id\": 14,\n            \"distance\": 0.9803846478462219,\n            \"entity\": {\n                \"color\": \"green_2899\"\n            }\n        },\n        {\n            \"id\": 1,\n            \"distance\": 0.8519943356513977,\n            \"entity\": {\n                \"color\": \"red_7025\"\n            }\n        }\n    ]\n]\n","{\"searchResults\": [\n    [\n        {\n            \"score\": 1.263043,\n            \"fields\": {\"color_tag\": \"green_2052\"}\n        },\n        {\n            \"score\": 1.2377806,\n            \"fields\": {\"color_tag\": \"purple_3709\"}\n        },\n        {\n            \"score\": 1.1869997,\n            \"fields\": {\"color_tag\": \"red_3026\"}\n        },\n        {\n            \"score\": 1.1748955,\n            \"fields\": {\"color_tag\": \"black_1646\"}\n        },\n        {\n            \"score\": 1.1720343,\n            \"fields\": {\"color_tag\": \"green_4853\"}\n        }\n    ]\n]}\n","[\n  { score: 2.3387961387634277, id: '718', color_tag: 'black_7154' },\n  { score: 2.3352415561676025, id: '1745', color_tag: 'blue_8741' },\n  { score: 2.290485382080078, id: '1408', color_tag: 'red_2324' },\n  { score: 2.285870313644409, id: '854', color_tag: 'black_5990' },\n  { score: 2.2593345642089844, id: '1309', color_tag: 'red_8458' }\n]\n","# Connect to Milvus\nclient = MilvusClient(uri='http://localhost:19530') # Milvus server address\n\n# Load data into collection\nclient.load_collection(\"group_search\") # Collection name\n\n# Group search results\nres = client.search(\n    collection_name=\"group_search\", # Collection name\n    data=[[0.14529211512077012, 0.9147257273453546, 0.7965055218724449, 0.7009258593102812, 0.5605206522382088]], # Query vector\n    search_params={\n    \"metric_type\": \"L2\",\n    \"params\": {\"nprobe\": 10},\n    }, # Search parameters\n    limit=5, # Max. number of groups to return\n    group_by_field=\"doc_id\", # Group results by document ID\n    output_fields=[\"doc_id\", \"passage_id\"]\n)\n\n# Retrieve the values in the `doc_id` column\ndoc_ids = [result['entity']['doc_id'] for result in res[0]]\npassage_ids = [result['entity']['passage_id'] for result in res[0]]\n\nprint(doc_ids)\nprint(passage_ids)\n","[\"doc_11\", \"doc_11\", \"doc_7\", \"doc_7\", \"doc_3\", \"doc_3\", \"doc_2\", \"doc_2\", \"doc_8\", \"doc_8\"]\n[5, 10, 11, 10, 9, 6, 5, 4, 9, 2]\n","# Connect to Milvus\nclient = MilvusClient(uri='http://localhost:19530') # Milvus server address\n\n# Load data into collection\nclient.load_collection(\"group_search\") # Collection name\n\n# Search without `group_by_field`\nres = client.search(\n    collection_name=\"group_search\", # Collection name\n    data=query_passage_vector, # Replace with your query vector\n    search_params={\n    \"metric_type\": \"L2\",\n    \"params\": {\"nprobe\": 10},\n    }, # Search parameters\n    limit=5, # Max. number of search results to return\n    # group_by_field=\"doc_id\", # Group results by document ID\n    output_fields=[\"doc_id\", \"passage_id\"]\n)\n\n# Retrieve the values in the `doc_id` column\ndoc_ids = [result['entity']['doc_id'] for result in res[0]]\npassage_ids = [result['entity']['passage_id'] for result in res[0]]\n\nprint(doc_ids)\nprint(passage_ids)\n","[\"doc_11\", \"doc_11\", \"doc_11\", \"doc_11\", \"doc_11\"]\n[1, 10, 3, 12, 9]\n","# In normal cases, you do not need to set search parameters manually\n# Except for range searches.\nsearch_parameters = {\n    'metric_type': 'L2',\n    'params': {\n        'nprobe': 10,\n        'level': 1，\n        'radius': 1.0\n        'range_filter': 0.8\n    }\n}\n"],"headingContent":"Single-Vector Search","anchorList":[{"label":"单向量搜索","href":"Single-Vector-Search","type":1,"isActive":false},{"label":"搜索概述","href":"Overview","type":2,"isActive":false},{"label":"准备工作","href":"Preparations","type":2,"isActive":false},{"label":"基本搜索","href":"Basic-search","type":2,"isActive":false},{"label":"过滤搜索","href":"Filtered-search","type":2,"isActive":false},{"label":"范围搜索","href":"Range-search","type":2,"isActive":false},{"label":"分组搜索","href":"Grouping-search","type":2,"isActive":false},{"label":"搜索参数","href":"Search-parameters","type":2,"isActive":false}]}
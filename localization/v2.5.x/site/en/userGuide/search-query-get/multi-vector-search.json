{"codeList":["# Create a collection in customized setup mode​\nfrom pymilvus import (​\n    MilvusClient, DataType​\n)​\n​\nclient = MilvusClient(​\n    uri=\"http://localhost:19530\",​\n    token=\"root:Milvus\"​\n)​\n​\n# Create schema​\nschema = MilvusClient.create_schema(​\n    auto_id=False,​\n    enable_dynamic_field=True,​\n)​\n# Add fields to schema​\nschema.add_field(field_name=\"id\", datatype=DataType.INT64, is_primary=True)​\nschema.add_field(field_name=\"text\", datatype=DataType.VARCHAR, max_length=1000)​\n# Define a sparse vector field to generate spare vectors with BM25\nschema.add_field(field_name=\"sparse\", datatype=DataType.SPARSE_FLOAT_VECTOR)​\nschema.add_field(field_name=\"dense\", datatype=DataType.FLOAT_VECTOR, dim=5)​\n\n","import io.milvus.v2.client.ConnectConfig;​\nimport io.milvus.v2.client.MilvusClientV2;​\nimport io.milvus.v2.common.DataType;​\nimport io.milvus.v2.service.collection.request.AddFieldReq;​\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;​\n​\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()​\n        .uri(\"http://localhost:19530\")​\n        .token(\"root:Milvus\")​\n        .build());​\n​\nCreateCollectionReq.CollectionSchema schema = client.createSchema();​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"id\")​\n        .dataType(DataType.Int64)​\n        .isPrimaryKey(true)​\n        .autoID(false)​\n        .build());​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"text\")​\n        .dataType(DataType.VarChar)​\n        .maxLength(1000)​\n        .build());​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"dense\")​\n        .dataType(DataType.FloatVector)​\n        .dimension(768)​\n        .build());​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"sparse\")​\n        .dataType(DataType.SparseFloatVector)​\n        .build());​\n\n","// WIP​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nconst address = \"http://localhost:19530\";​\nconst token = \"root:Milvus\";​\nconst client = new MilvusClient({address, token});​\n​\n// Create a collection in customized setup mode​\n// Define fields​\nconst fields = [​\n    {​\n        name: \"id\",​\n        data_type: DataType.Int64,​\n        is_primary_key: true,​\n        auto_id: false​\n    },​\n    {​\n        name: \"text\",​\n        data_type: DataType.VarChar,​\n        max_length: 1000​\n    },​\n    {​\n        name: \"sparse\",​\n        data_type: DataType.SPARSE_FLOAT_VECTOR​\n    },​\n    {​\n        name: \"dense\",​\n        data_type: DataType.FloatVector,​\n        dim: 768​\n    }​\n]​\n\n","export schema='{​\n        \"autoId\": false,​\n        \"enabledDynamicField\": true,​\n        \"fields\": [​\n            {​\n                \"fieldName\": \"id\",​\n                \"dataType\": \"Int64\",​\n                \"isPrimary\": true​\n            },​\n            {​\n                \"fieldName\": \"text\",​\n                \"dataType\": \"VarChar\",​\n                \"elementTypeParams\": {​\n                    \"max_length\": 1000​\n                }​\n            },​\n            {​\n                \"fieldName\": \"sparse\",​\n                \"dataType\": \"SparseFloatVector\"​\n            },​\n            {​\n                \"fieldName\": \"dense\",​\n                \"dataType\": \"FloatVector\",​\n                \"elementTypeParams\": {​\n                    \"dim\": \"768\"​\n                }​\n            }​\n        ]​\n    }'​\n\n","# Define function to generate sparse vectors\n\nbm25_function = Function(\n    name=\"text_bm25_emb\", # Function name\n    input_field_names=[\"text\"], # Name of the VARCHAR field containing raw text data\n    output_field_names=[\"sparse\"], # Name of the SPARSE_FLOAT_VECTOR field reserved to store generated embeddings\n    function_type=FunctionType.BM25,\n)\n\nschema.add_function(bm25_function)\n","import io.milvus.common.clientenum.FunctionType;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq.Function;\n\nimport java.util.*;\n\nschema.addFunction(Function.builder()\n        .functionType(FunctionType.BM25)\n        .name(\"text_bm25_emb\")\n        .inputFieldNames(Collections.singletonList(\"text\"))\n        .outputFieldNames(Collections.singletonList(\"sparse\"))\n        .build());\n","const functions = [\n    {\n      name: 'text_bm25_emb',\n      description: 'bm25 function',\n      type: FunctionType.BM25,\n      input_field_names: ['text'],\n      output_field_names: ['sparse'],\n      params: {},\n    },\n]；\n","export schema='{\n        \"autoId\": true,\n        \"enabledDynamicField\": false,\n        \"fields\": [\n            {\n                \"fieldName\": \"id\",\n                \"dataType\": \"Int64\",\n                \"isPrimary\": true\n            },\n            {\n                \"fieldName\": \"text\",\n                \"dataType\": \"VarChar\",\n                \"elementTypeParams\": {\n                    \"max_length\": 1000,\n                    \"enable_analyzer\": true\n                }\n            },\n            {\n                \"fieldName\": \"sparse\",\n                \"dataType\": \"SparseFloatVector\"\n            }\n        ],\n        \"functions\": [\n            {\n                \"name\": \"text_bm25_emb\",\n                \"type\": \"BM25\",\n                \"inputFieldNames\": [\"text\"],\n                \"outputFieldNames\": [\"sparse\"],\n                \"params\": {}\n            }\n        ]\n    }'\n","from pymilvus import MilvusClient​\n​\n# Prepare index parameters​\nindex_params = client.prepare_index_params()​\n​\n# Add indexes​\nindex_params.add_index(​\n    field_name=\"dense\",​\n    index_name=\"dense_index\",​\n    index_type=\"IVF_FLAT\",​\n    metric_type=\"IP\",​\n    params={\"nlist\": 128},​\n)​\n​\nindex_params.add_index(\n    field_name=\"sparse\",\n    index_name=\"sparse_index\",\n    index_type=\"SPARSE_INVERTED_INDEX\",  # Index type for sparse vectors\n    metric_type=\"BM25\",  # Set to `BM25` when using function to generate sparse vectors\n    params={\"inverted_index_algo\": \"DAAT_MAXSCORE\"},  # The ratio of small vector values to be dropped during indexing\n)\n","import io.milvus.v2.common.IndexParam;​\nimport java.util.*;​\n​\nMap<String, Object> denseParams = new HashMap<>();​\ndenseParams.put(\"nlist\", 128);​\nIndexParam indexParamForDenseField = IndexParam.builder()​\n        .fieldName(\"dense\")​\n        .indexName(\"dense_index\")​\n        .indexType(IndexParam.IndexType.IVF_FLAT)​\n        .metricType(IndexParam.MetricType.IP)​\n        .extraParams(denseParams)​\n        .build();​\n​\nMap<String, Object> sparseParams = new HashMap<>();​\nsparseParams.put(\"inverted_index_algo\": \"DAAT_MAXSCORE\");​ // Algorithm used for building and querying the index\nIndexParam indexParamForSparseField = IndexParam.builder()​\n        .fieldName(\"sparse\")​\n        .indexName(\"sparse_index\")​\n        .indexType(IndexParam.IndexType.SPARSE_INVERTED_INDEX)​\n        .metricType(IndexParam.MetricType.BM25)​\n        .extraParams(sparseParams)​\n        .build();​\n​\nList<IndexParam> indexParams = new ArrayList<>();​\nindexParams.add(indexParamForDenseField);​\nindexParams.add(indexParamForSparseField);​\n\n","const index_params = [{​\n    field_name: \"dense\",​\n    index_type: \"IVF_FLAT\",​\n    metric_type: \"IP\"​\n},{​\n    field_name: \"sparse\",​\n    index_type: \"SPARSE_INVERTED_INDEX\",​\n    metric_type: \"BM25\"​\n}]​\n\n","export indexParams='[​\n        {​\n            \"fieldName\": \"dense\",​\n            \"metricType\": \"IP\",​\n            \"indexName\": \"dense_index\",​\n            \"indexType\":\"IVF_FLAT\",​\n            \"params\":{\"nlist\":128}​\n        },​\n        {​\n            \"fieldName\": \"sparse\",​\n            \"metricType\": \"BM25\",​\n            \"indexName\": \"sparse_index\",​\n            \"indexType\": \"SPARSE_INVERTED_INDEX\"​\n        }​\n    ]'​\n\n","from pymilvus import MilvusClient​\n​\nclient.create_collection(​\n    collection_name=\"hybrid_search_collection\",​\n    schema=schema,​\n    index_params=index_params​\n)​\n\n","CreateCollectionReq createCollectionReq = CreateCollectionReq.builder()​\n        .collectionName(\"hybrid_search_collection\")​\n        .collectionSchema(schema)​\n        .indexParams(indexParams)​\n        .build();​\nclient.createCollection(createCollectionReq);​\n\n","res = await client.createCollection({​\n    collection_name: \"hybrid_search_collection\",​\n    fields: fields,​\n    index_params: index_params,​\n})​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d \"{​\n    \\\"collectionName\\\": \\\"hybrid_search_collection\\\",​\n    \\\"schema\\\": $schema,​\n    \\\"indexParams\\\": $indexParams​\n}\"​\n\n","from pymilvus import MilvusClient​\n​\ndocs = [\n    \"Artificial intelligence was founded as an academic discipline in 1956.\",\n    \"Alan Turing was the first person to conduct substantial research in AI.\",\n    \"Born in Maida Vale, London, Turing was raised in southern England.\",\n]\n\ndata = [\n    {\"id\": 1, \"text\": docs[0], \"dense\": [2.7242085933685303, 6.021071434020996, 0.4754035174846649, 9.358858108520508, 5.173221111297607]},\n    {\"id\": 2, \"text\": docs[1], \"dense\": [8.584294319152832, 2.7640628814697266, 9.558855056762695, 2.584272861480713, 4.705013275146484]},\n    {\"id\": 3, \"text\": docs[2], \"dense\": [2.5525057315826416, 3.8815805912017822, 9.343480110168457, 7.888997554779053, 4.500918388366699]},\n]\n​\nres = client.insert(​\n    collection_name=\"hybrid_search_collection\",​\n    data=data​\n)​\n​\n\n","import com.google.gson.Gson;​\nimport com.google.gson.JsonObject;​\nimport io.milvus.v2.service.vector.request.InsertReq;​\n​\nGson gson = new Gson();​\nfloat[] dense1 = {2.7242086f, 6.0210714f, 0.47540352f, 9.3588581f, 5.1732211f};\nfloat[] dense2 = {8.5842943f, 2.7640628f, 9.5588550f, 2.5842728f, 4.7050133f};\nfloat[] dense3 = {2.5525057f, 3.8815806f, 9.3434801f, 7.8889976f, 4.5009184f};\nString[] docs = {\n            \"Artificial intelligence was founded as an academic discipline in 1956.\",\n            \"Alan Turing was the first person to conduct substantial research in AI.\",\n            \"Born in Maida Vale, London, Turing was raised in southern England.\"\n};\nJsonObject row1 = new JsonObject();\nrow1.addProperty(\"id\", 1);\nrow1.addProperty(\"text\", docs[0]);\nrow1.add(\"dense\", gson.toJsonTree(dense1));\n​\nJsonObject row2 = new JsonObject();\nrow2.addProperty(\"id\", 2);\nrow2.addProperty(\"text\", docs[1]);\nrow2.add(\"dense\", gson.toJsonTree(dense2));\n​\nJsonObject row3 = new JsonObject();\nrow3.addProperty(\"id\", 3);\nrow3.addProperty(\"text\", docs[2]);\nrow3.add(\"dense\", gson.toJsonTree(dense3));\n​\nList<JsonObject> data = Arrays.asList(row1, row2, row3);​\nInsertReq insertReq = InsertReq.builder()​\n        .collectionName(\"hybrid_search_collection\")​\n        .data(data)​\n        .build();​\n​\nInsertResp insertResp = client.insert(insertReq);​\n\n","const { MilvusClient, DataType } = require(\"@zilliz/milvus2-sdk-node\")​\n​\nconst docs = [\n    \"Artificial intelligence was founded as an academic discipline in 1956.\",\n    \"Alan Turing was the first person to conduct substantial research in AI.\",\n    \"Born in Maida Vale, London, Turing was raised in southern England.\"\n];\n\nconst data = [\n    {\n        id: 1,\n        text: docs[0],\n        dense: [2.7242085933685303, 6.021071434020996, 0.4754035174846649, 9.358858108520508, 5.173221111297607]\n    },\n    {\n        id: 2,\n        text: docs[1],\n        dense: [8.584294319152832, 2.7640628814697266, 9.558855056762695, 2.584272861480713, 4.705013275146484]\n    },\n    {\n        id: 3,\n        text: docs[2],\n        dense: [2.5525057315826416, 3.8815805912017822, 9.343480110168457, 7.888997554779053, 4.500918388366699]\n    }\n];\n​\nvar res = await client.insert({​\n    collection_name: \"hybrid_search_collection\",​\n    data: data,​\n})​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/insert\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"data\": [\n            {\n                \"id\": 1,\n                \"text\": \"Artificial intelligence was founded as an academic discipline in 1956.\",\n                \"dense\": [2.7242085933685303, 6.021071434020996, 0.4754035174846649, 9.358858108520508, 5.173221111297607]\n            },\n            {\n                \"id\": 2,\n                \"text\": \"Alan Turing was the first person to conduct substantial research in AI.\",\n                \"dense\": [8.584294319152832, 2.7640628814697266, 9.558855056762695, 2.584272861480713, 4.705013275146484]\n            },\n            {\n                \"id\": 3,\n                \"text\": \"Born in Maida Vale, London, Turing was raised in southern England.\",\n                \"dense\": [2.5525057315826416, 3.8815805912017822, 9.343480110168457, 7.888997554779053, 4.500918388366699]\n            }\n        ],​\n    \"collectionName\": \"hybrid_search_collection\"​\n}'​\n\n","from pymilvus import AnnSearchRequest​\n​\nsearch_param_1 = {\n    \"data\": [[0.7425515055656433, 7.774101734161377, 0.7397570610046387, 2.429982900619507, 3.8253049850463867]],\n    \"anns_field\": \"dense\",\n    \"param\": {\n        \"metric_type\": \"IP\",\n        \"params\": {\"nprobe\": 10}\n    },\n    \"limit\": 2\n}\nrequest_1 = AnnSearchRequest(**search_param_1)\n\nsearch_param_2 = {\n    \"data\": ['Who started AI research'],\n    \"anns_field\": \"sparse\",\n    \"param\": {\n        \"metric_type\": \"BM25\",\n    },\n    \"limit\": 2\n}\nrequest_2 = AnnSearchRequest(**search_param_2)\n\nreqs = [request_1, request_2]\n​\n\n","import io.milvus.v2.service.vector.request.AnnSearchReq;\nimport io.milvus.v2.service.vector.request.data.BaseVector;\nimport io.milvus.v2.service.vector.request.data.FloatVec;\nimport io.milvus.v2.service.vector.request.data.TextVec;\nimport io.milvus.v2.service.index.IndexParam;\n\nimport java.util.*;\n\npublic class MilvusSearchRequest {\n    public static void main(String[] args) {\n        float[] denseQueryVector = {\n                0.7425515f, 7.7741017f, 0.73975706f, 2.4299829f, 3.825305f\n        };\n\n        String sparseQueryText = \"Who started AI research\";\n\n        List<BaseVector> queryDenseVectors = Collections.singletonList(new FloatVec(denseQueryVector));\n\n        List<BaseVector> querySparseVectors = Collections.singletonList(new TextVec(sparseQueryText));\n\n        List<AnnSearchReq> searchRequests = new ArrayList<>();\n\n        searchRequests.add(AnnSearchReq.builder()\n                .vectorFieldName(\"dense\")  // Field Name\n                .vectors(queryDenseVectors) // Query Vector\n                .metricType(IndexParam.MetricType.IP) // Inner Product Metric\n                .params(\"{\\\"nprobe\\\": 10}\") // Search Params\n                .topK(2) // Limit results to top 2\n                .build());\n\n        searchRequests.add(AnnSearchReq.builder()\n                .vectorFieldName(\"sparse\") // Field Name\n                .vectors(querySparseVectors) // Query Text Vector\n                .metricType(IndexParam.MetricType.BM25) // BM25 Metric for sparse\n                .params(\"{}\") // No additional parameters for BM25\n                .topK(2) // Limit results to top 2\n                .build());\n\n        System.out.println(\"Generated Search Requests:\");\n        searchRequests.forEach(System.out::println);\n    }\n}\n\n\n","const search_param_1 = {\n    \"data\": [[0.7425515055656433, 7.774101734161377, 0.7397570610046387, 2.429982900619507, 3.8253049850463867]], \n    \"anns_field\": \"dense\",\n    \"param\": {\n        \"metric_type\": \"IP\",\n        \"params\": { \"nprobe\": 10 } \n    },\n    \"limit\": 2\n};\n\nconst search_param_2 = {\n    \"data\": [\"Who started AI research\"], \n    \"anns_field\": \"sparse\",\n    \"param\": {\n        \"metric_type\": \"BM25\",\n        \"params\": {} // BM25 does not require extra parameters\n    },\n    \"limit\": 2\n};\n\n// Combine both search parameters into a single request list\nconst reqs = [search_param_1, search_param_2];\n\n","export req='[\n    {\n        \"data\": [[0.7425515055656433, 7.774101734161377, 0.7397570610046387, 2.429982900619507, 3.8253049850463867]], \n        \"anns_field\": \"dense\",\n        \"param\": {\n            \"metric_type\": \"IP\",\n            \"params\": {\n                \"nprobe\": 10\n            }\n        },\n        \"limit\": 2\n    },\n    {\n        \"data\": [\"Who started AI research\"],\n        \"anns_field\": \"sparse\",\n        \"param\": {\n            \"metric_type\": \"BM25\",\n            \"params\": {}\n        },\n        \"limit\": 2\n    }\n]'\n\ncurl -X POST \"http://your-milvus-server-address/v1/vector/search\" \\\n     -H \"Content-Type: application/json\" \\\n     -d \"$req\"\n\n\n","from pymilvus import WeightedRanker​\n​\nranker = WeightedRanker(0.8, 0.3) ​\n\n","import io.milvus.v2.service.vector.request.ranker.BaseRanker;​\nimport io.milvus.v2.service.vector.request.ranker.WeightedRanker;​\n​\nBaseRanker reranker = new WeightedRanker(Arrays.asList(0.8f, 0.3f));​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nconst rerank = WeightedRanker(0.8, 0.3);​\n\n","export rerank='{​\n        \"strategy\": \"ws\",​\n        \"params\": {\"weights\": [0.8,0.3]}​\n    }'​\n\n","from pymilvus import RRFRanker​\n​\nranker = RRFRanker(100)​\n\n","import io.milvus.v2.service.vector.request.ranker.BaseRanker;​\nimport io.milvus.v2.service.vector.request.ranker.RRFRanker;​\n​\nBaseRanker reranker = new RRFRanker(100);​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nconst rerank = RRFRanker(\"100\");​\n\n","export rerank='{​\n        \"strategy\": \"rrf\",​\n        \"params\": { \"k\": 100}​\n    }'​\n\n","from pymilvus import MilvusClient​\n​\nres = client.hybrid_search(​\n    collection_name=\"hybrid_search_collection\",​\n    reqs=reqs,​\n    ranker=ranker,​\n    limit=2​\n)​\nfor hits in res:​\n    print(\"TopK results:\")​\n    for hit in hits:​\n        print(hit)​\n\n","import io.milvus.v2.common.ConsistencyLevel;​\nimport io.milvus.v2.service.vector.request.HybridSearchReq;​\nimport io.milvus.v2.service.vector.response.SearchResp;​\n​\nHybridSearchReq hybridSearchReq = HybridSearchReq.builder()​\n        .collectionName(\"hybrid_search_collection\")​\n        .searchRequests(searchRequests)​\n        .ranker(reranker)​\n        .topK(2)​\n        .consistencyLevel(ConsistencyLevel.BOUNDED)​\n        .build();​\n​\nSearchResp searchResp = client.hybridSearch(hybridSearchReq);​\n\n","const { MilvusClient, DataType } = require(\"@zilliz/milvus2-sdk-node\")​\n​\nres = await client.loadCollection({​\n    collection_name: \"hybrid_search_collection\"​\n})​\n​\nimport { MilvusClient, RRFRanker, WeightedRanker } from '@zilliz/milvus2-sdk-node';​\n​\nconst search = await client.search({​\n  collection_name: \"hybrid_search_collection\",​\n  data: [search_param_1, search_param_2],​\n  limit: 2,​\n  rerank: RRFRanker(100)​\n});​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/advanced_search\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d \"{​\n    \\\"collectionName\\\": \\\"hybrid_search_collection\\\",​\n    \\\"search\\\": ${req},​\n    \\\"rerank\\\": {​\n        \\\"strategy\\\":\\\"rrf\\\",​\n        \\\"params\\\": {​\n            \\\"k\\\": 10​\n        }​\n    },​\n    \\\"limit\\\": 3,​\n    \\\"outputFields\\\": [​\n        \\\"user_id\\\",​\n        \\\"word_count\\\",​\n        \\\"book_describe\\\"​\n    ]​\n}\"​\n\n","[\"['id: 844, distance: 0.006047376897186041, entity: {}', 'id: 876, distance: 0.006422005593776703, entity: {}']\"]​\n\n"],"headingContent":"Hybrid Search​","anchorList":[{"label":"Hybrid Search​","href":"Hybrid-Search​","type":1,"isActive":false},{"label":"Scenarios​","href":"Scenarios​","type":2,"isActive":false},{"label":"Workflow​","href":"Workflow​","type":2,"isActive":false},{"label":"Examples​","href":"Examples​","type":2,"isActive":false}]}
{"codeList":["{\n  \"metadata\": {\n    \"category\": \"electronics\",\n    \"brand\": \"BrandA\",\n    \"in_stock\": true,\n    \"price\": 99.99,\n    \"string_price\": \"99.99\",\n    \"tags\": [\"clearance\", \"summer_sale\"],\n    \"supplier\": {\n      \"name\": \"SupplierX\",\n      \"country\": \"USA\",\n      \"contact\": {\n        \"email\": \"support@supplierx.com\",\n        \"phone\": \"+1-800-555-0199\"\n      }\n    }\n  }\n}\n","from pymilvus import MilvusClient, DataType\n\nclient = MilvusClient(uri=\"http://localhost:19530\")\n\n# Create schema with a JSON field\nschema = client.create_schema(auto_id=False, enable_dynamic_field=True)\n\nschema.add_field(field_name=\"product_id\", datatype=DataType.INT64, is_primary=True)\nschema.add_field(field_name=\"vector\", datatype=DataType.FLOAT_VECTOR, dim=5)\n# highlight-next-line\nschema.add_field(field_name=\"metadata\", datatype=DataType.JSON, nullable=True)  # JSON field that allows null values\n\nclient.create_collection(\n    collection_name=\"product_catalog\",\n    schema=schema\n)\n","import io.milvus.v2.client.*;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;\nimport io.milvus.v2.service.collection.request.AddFieldReq;\n\nConnectConfig config = ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .build();\nMilvusClientV2 client = new MilvusClientV2(config);\n\nCreateCollectionReq.CollectionSchema schema = CreateCollectionReq.CollectionSchema.builder()\n        .enableDynamicField(true)\n        .build();\n        \nschema.addField(AddFieldReq.builder()\n        .fieldName(\"product_id\")\n        .dataType(DataType.Int64)\n        .isPrimaryKey(Boolean.TRUE)\n        .build());\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"vector\")\n        .dataType(DataType.FloatVector)\n        .dimension(5)\n        .build());\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"metadata\")\n        .dataType(DataType.JSON)\n        .isNullable(true)\n        .build());\n        \nCreateCollectionReq requestCreate = CreateCollectionReq.builder()\n        .collectionName(\"product_catalog\")\n        .collectionSchema(schema)\n        .build();\nclient.createCollection(requestCreate);\n","// nodejs\n","import (\n    \"context\"\n\n    \"github.com/milvus-io/milvus/client/v2/entity\"\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nclient, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: \"localhost:19530\",\n})\nif err != nil {\n    return err\n}\n\nschema := entity.NewSchema().WithDynamicFieldEnabled(true)\nschema.WithField(entity.NewField().\n    WithName(\"product_id\").pk\n    WithDataType(entity.FieldTypeInt64).\n    WithIsPrimaryKey(true),\n).WithField(entity.NewField().\n    WithName(\"vector\").\n    WithDataType(entity.FieldTypeFloatVector).\n    WithDim(5),\n).WithField(entity.NewField().\n    WithName(\"metadata\").\n    WithDataType(entity.FieldTypeJSON).\n    WithNullable(true),\n)\n\nerr = client.CreateCollection(ctx, milvusclient.NewCreateCollectionOption(\"product_catalog\", schema))\nif err != nil {\n    return err\n}\n","# restful\n","entities = [\n    {\n        \"product_id\": 1,\n        \"vector\": [0.1, 0.2, 0.3, 0.4, 0.5],\n        \"metadata\": {\n            \"category\": \"electronics\",\n            \"brand\": \"BrandA\",\n            \"in_stock\": True,\n            \"price\": 99.99,\n            \"string_price\": \"99.99\",\n            \"tags\": [\"clearance\", \"summer_sale\"],\n            \"supplier\": {\n                \"name\": \"SupplierX\",\n                \"country\": \"USA\",\n                \"contact\": {\n                    \"email\": \"support@supplierx.com\",\n                    \"phone\": \"+1-800-555-0199\"\n                }\n            }\n        }\n    }\n]\n\nclient.insert(collection_name=\"product_catalog\", data=entities)\n","import com.google.gson.Gson;\nimport com.google.gson.JsonObject;\n\nimport io.milvus.v2.service.vector.request.InsertReq;\n\nGson gson = new Gson();\nJsonObject row = new JsonObject();\nrow.addProperty(\"product_id\", 1);\nrow.add(\"vector\", gson.toJsonTree(Arrays.asList(0.1, 0.2, 0.3, 0.4, 0.5)));\n\nJsonObject metadata = new JsonObject();\nmetadata.addProperty(\"category\", \"electronics\");\nmetadata.addProperty(\"brand\", \"BrandA\");\nmetadata.addProperty(\"in_stock\", true);\nmetadata.addProperty(\"price\", 99.99);\nmetadata.addProperty(\"string_price\", \"99.99\");\nmetadata.add(\"tags\", gson.toJsonTree(Arrays.asList(\"clearance\", \"summer_sale\")));\n\nJsonObject supplier = new JsonObject();\nsupplier.addProperty(\"name\", \"SupplierX\");\nsupplier.addProperty(\"country\", \"USA\");\n\nJsonObject contact = new JsonObject();\ncontact.addProperty(\"email\", \"support@supplierx.com\");\ncontact.addProperty(\"phone\", \"+1-800-555-0199\");\n\nsupplier.add(\"contact\", contact);\nmetadata.add(\"supplier\", supplier);\nrow.add(\"metadata\", metadata);\n\nclient.insert(InsertReq.builder()\n        .collectionName(\"product_catalog\")\n        .data(Collections.singletonList(row))\n        .build());\n","// nodejs\n","_, err = client.Insert(ctx, milvusclient.NewColumnBasedInsertOption(\"product_catalog\").\n    WithInt64Column(\"product_id\", []int64{1}).\n    WithFloatVectorColumn(\"vector\", 5, [][]float32{\n        {0.1, 0.2, 0.3, 0.4, 0.5},\n    }).WithColumns(\n    column.NewColumnJSONBytes(\"metadata\", [][]byte{\n        []byte(`{\n            \"category\": \"electronics\",\n            \"brand\": \"BrandA\",\n            \"in_stock\": True,\n            \"price\": 99.99,\n            \"string_price\": \"99.99\",\n            \"tags\": [\"clearance\", \"summer_sale\"],\n            \"supplier\": {\n                \"name\": \"SupplierX\",\n                \"country\": \"USA\",\n                \"contact\": {\n                    \"email\": \"support@supplierx.com\",\n                    \"phone\": \"+1-800-555-0199\"\n                }\n            }\n        }`),\n    }),\n))\nif err != nil {\n    return err\n}\n","# restful\n","# Index the category field as a string\nindex_params = client.prepare_index_params()\n\nindex_params.add_index(\n    field_name=\"metadata\",\n    # highlight-next-line\n    index_type=\"AUTOINDEX\", # Must be set to AUTOINDEX or INVERTEDfor JSON path indexing\n    index_name=\"category_index\",  # Unique index name\n    # highlight-start\n    params={\n        \"json_path\": \"metadata[\\\"category\\\"]\", # Path to the JSON key to be indexed\n        \"json_cast_type\": \"varchar\" # Data cast type\n    }\n    # highlight-end\n)\n\n# Index the tags array as string array\nindex_params.add_index(\n    field_name=\"metadata\",\n    # highlight-next-line\n    index_type=\"AUTOINDEX\", # Must be set to AUTOINDEX or INVERTEDfor JSON path indexing\n    index_name=\"tags_array_index\", # Unique index name\n    # highlight-start\n    params={\n        \"json_path\": \"metadata[\\\"tags\\\"]\", # Path to the JSON key to be indexed\n        \"json_cast_type\": \"array_varchar\" # Data cast type\n    }\n    # highlight-end\n)\n","import io.milvus.v2.common.IndexParam;\n\nMap<String,Object> extraParams1 = new HashMap<>();\nextraParams1.put(\"json_path\", \"metadata[\\\"category\\\"]\");\nextraParams1.put(\"json_cast_type\", \"varchar\");\nindexParams.add(IndexParam.builder()\n        .fieldName(\"metadata\")\n        .indexName(\"category_index\")\n        .indexType(IndexParam.IndexType.AUTOINDEX)\n        .extraParams(extraParams1)\n        .build());\n\nMap<String,Object> extraParams2 = new HashMap<>();\nextraParams2.put(\"json_path\", \"metadata[\\\"tags\\\"]\");\nextraParams2.put(\"json_cast_type\", \"array_varchar\");\nindexParams.add(IndexParam.builder()\n        .fieldName(\"metadata\")\n        .indexName(\"tags_array_index\")\n        .indexType(IndexParam.IndexType.AUTOINDEX)\n        .extraParams(extraParams2)\n        .build());\n","// nodejs\n","import (\n    \"github.com/milvus-io/milvus/client/v2/index\"\n)\n\njsonIndex1 := index.NewJSONPathIndex(index.AUTOINDEX, \"varchar\", `metadata[\"category\"]`)\n    .WithIndexName(\"category_index\")\njsonIndex2 := index.NewJSONPathIndex(index.AUTOINDEX, \"array_varchar\", `metadata[\"tags\"]`)\n    .WithIndexName(\"tags_array_index\")\n\nindexOpt1 := milvusclient.NewCreateIndexOption(\"product_catalog\", \"metadata\", jsonIndex1)\nindexOpt2 := milvusclient.NewCreateIndexOption(\"product_catalog\", \"metadata\", jsonIndex2)\n","# restful\n","# Convert string numbers to double for indexing\nindex_params.add_index(\n    field_name=\"metadata\",\n    # highlight-next-line\n    index_type=\"AUTOINDEX\", # Must be set to AUTOINDEX or INVERTEDfor JSON path indexing\n    index_name=\"string_to_double_index\", # Unique index name\n    params={\n        \"json_path\": \"metadata[\\\"string_price\\\"]\", # Path to the JSON key to be indexed\n        \"json_cast_type\": \"double\", # Data cast type\n        # highlight-next-line\n        \"json_cast_function\": \"STRING_TO_DOUBLE\" # Cast function; case insensitive\n    }\n)\n","Map<String,Object> extraParams3 = new HashMap<>();\nextraParams3.put(\"json_path\", \"metadata[\\\"string_price\\\"]\");\nextraParams3.put(\"json_cast_type\", \"double\");\nextraParams3.put(\"json_cast_function\", \"STRING_TO_DOUBLE\");\nindexParams.add(IndexParam.builder()\n        .fieldName(\"metadata\")\n        .indexName(\"string_to_double_index\")\n        .indexType(IndexParam.IndexType.AUTOINDEX)\n        .extraParams(extraParams3)\n        .build());\n","// nodejs\n","jsonIndex3 := index.NewJSONPathIndex(index.AUTOINDEX, \"double\", `metadata[\"string_price\"]`)\n                    .WithIndexName(\"string_to_double_index\")\n\nindexOpt3 := milvusclient.NewCreateIndexOption(\"product_catalog\", \"metadata\", jsonIndex3)\n\n","# restful\n","client.create_index(\n    collection_name=\"product_catalog\",\n    index_params=index_params\n)\n","import io.milvus.v2.service.index.request.CreateIndexReq;\n\nclient.createIndex(CreateIndexReq.builder()\n        .collectionName(\"product_catalog\")\n        .indexParams(indexParams)\n        .build());\n","// nodejs\n","indexTask1, err := client.CreateIndex(ctx, indexOpt1)\nif err != nil {\n    return err\n}\nindexTask2, err := client.CreateIndex(ctx, indexOpt2)\nif err != nil {\n    return err\n}\nindexTask3, err := client.CreateIndex(ctx, indexOpt3)\nif err != nil {\n    return err\n}\n","# restful\n","filter = 'metadata[\"category\"] == \"electronics\"'\nfilter = 'metadata[\"price\"] > 50'\nfilter = 'json_contains(metadata[\"tags\"], \"featured\")'\n","String filter = 'metadata[\"category\"] == \"electronics\"';\nString filter = 'metadata[\"price\"] > 50';\nString filter = 'json_contains(metadata[\"tags\"], \"featured\")';\n","// nodejs\n","filter := 'metadata[\"category\"] == \"electronics\"'\nfilter := 'metadata[\"price\"] > 50'\nfilter := 'json_contains(metadata[\"tags\"], \"featured\")'\n","# restful\n","\"a\\\"b\", \"a'b\", \"a\\\\b\"\n","'a\"b', 'a\\'b'\n"],"headingContent":"JSON Field","anchorList":[{"label":"Bidang JSON","href":"JSON-Field","type":1,"isActive":false},{"label":"Apa yang dimaksud dengan bidang JSON?","href":"What-is-a-JSON-field","type":2,"isActive":false},{"label":"Mendefinisikan bidang JSON di dalam skema","href":"Define-a-JSON-field-in-the-schema","type":2,"isActive":false},{"label":"Menyisipkan entitas dengan data JSON","href":"Insert-entities-with-JSON-data","type":2,"isActive":false},{"label":"Mengindeks nilai di dalam bidang JSONCompatible with Milvus 2.5.11+","href":"Index-values-inside-the-JSON-field--Milvus-2511+","type":2,"isActive":false},{"label":"Memfilter berdasarkan nilai bidang JSON","href":"Filter-by-JSON-field-values","type":2,"isActive":false},{"label":"Menggabungkan semuanya","href":"Pull-it-all-together","type":2,"isActive":false},{"label":"PERTANYAAN UMUM","href":"FAQ","type":2,"isActive":false}]}
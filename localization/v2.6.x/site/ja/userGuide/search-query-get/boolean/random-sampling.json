{"codeList":["filter = \"RANDOM_SAMPLE(sampling_factor)\"\n","// java\n","// go\n","// node\n","# restful\n","# Correct: Filter first, then sample\nfilter = 'color == \"red\" AND RANDOM_SAMPLE(0.001)'\n# Processing: Find all red items → Sample 0.1% of those red items\n\n# Incorrect: OR doesn't make logical sense\nfilter = 'color == \"red\" OR RANDOM_SAMPLE(0.001)'  # ❌ Invalid logic\n# This would mean: \"Either red items OR sample everything\" - which is meaningless\n","// java\n","// go\n","// node\n","# restful\n","from pymilvus import MilvusClient\n\nclient = MilvusClient(uri=\"http://localhost:19530\")\n\n# Sample approximately 1% of the entire collection\nresult = client.query(\n    collection_name=\"product_catalog\",\n    # highlight-next-line\n    filter=\"RANDOM_SAMPLE(0.01)\",\n    output_fields=[\"id\", \"product_name\"],\n    limit=10\n)\n\nprint(f\"Sampled {len(result)} products from collection\")\n","// java\n","// go\n","// node\n","# restful\n","# First filter by category and price, then sample 0.5% of results\nfilter_expression = 'category == \"electronics\" AND price > 100 AND RANDOM_SAMPLE(0.005)'\n\nresult = client.query(\n    collection_name=\"product_catalog\",\n    # highlight-next-line\n    filter=filter_expression,\n    output_fields=[\"product_name\", \"price\", \"rating\"],\n    limit=10\n)\n\nprint(f\"Found {len(result)} electronics products in sample\")\n","// java\n","// go\n","// node\n","# restful\n","# Get insights from ~0.1% of premium customer data\nfilter_expression = 'customer_tier == \"premium\" AND region == 'North America' AND RANDOM_SAMPLE(0.001)'\n\nresult = client.query(\n    collection_name=\"customer_profiles\",\n    # highlight-next-line\n    filter=filter_expression,\n    output_fields=[\"purchase_amount\", \"satisfaction_score\", \"last_purchase_date\"],\n    limit=10\n)\n\n# Analyze sample for quick insights\nif result:\n    average_purchase = sum(r[\"purchase_amount\"] for r in result) / len(result)\n    average_satisfaction = sum(r[\"satisfaction_score\"] for r in result) / len(result)\n    \n    print(f\"Sample size: {len(result)}\")\n    print(f\"Average purchase amount: ${average_purchase:.2f}\")\n    print(f\"Average satisfaction score: {average_satisfaction:.2f}\")\n","// java\n","// go\n","// node\n","# restful\n","# Search for similar products within a sampled subset\nsearch_results = client.search(\n    collection_name=\"product_catalog\",\n    data=[[0.1, 0.2, 0.3, 0.4, 0.5]],  # query vector\n    # highlight-next-line\n    filter='category == \"books\" AND RANDOM_SAMPLE(0.01)',\n    search_params={\"metric_type\": \"L2\", \"params\": {}},\n    output_fields=[\"title\", \"author\", \"price\"],\n    limit=10\n)\n\nprint(f\"Found {len(search_results[0])} similar books in sample\")\n","// java\n","// go\n","// node\n","# restful\n"],"headingContent":"Random Sampling","anchorList":[{"label":"ランダム・サンプリングCompatible with Milvus 2.6.x","href":"Random-Sampling","type":1,"isActive":false},{"label":"構文","href":"Syntax","type":2,"isActive":false},{"label":"他のフィルタとの組み合わせ","href":"Combine-with-other-filters","type":2,"isActive":false},{"label":"例","href":"Examples","type":2,"isActive":false},{"label":"ベストプラクティス","href":"Best-practices","type":2,"isActive":false}]}